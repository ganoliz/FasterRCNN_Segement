images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])

Epoch 1/40:   8%|▊         | 3/40 [00:02<00:35,  1.04img/s, loss (batch)=1.27]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 1/40:  20%|██        | 8/40 [00:07<00:30,  1.05img/s, loss (batch)=1.06]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 1/40:  30%|███       | 12/40 [00:11<00:26,  1.05img/s, loss (batch)=1.03]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 1/40:  35%|███▌      | 14/40 [00:13<00:24,  1.06img/s, loss (batch)=0.967]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 1/40:  45%|████▌     | 18/40 [00:17<00:20,  1.06img/s, loss (batch)=0.98]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 1/40:  50%|█████     | 20/40 [00:19<00:19,  1.05img/s, loss (batch)=0.949]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 1/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.06img/s, loss (batch)=0.958]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 1/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.05img/s, loss (batch)=0.925]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 1/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.06img/s, loss (batch)=0.985]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 1/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.05img/s, loss (batch)=0.865]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 1/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.05img/s, loss (batch)=0.929]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 1/40: 100%|██████████| 40/40 [00:37<00:00,  1.05img/s, loss (batch)=0.903]
Epoch 2/40:   5%|▌         | 2/40 [00:01<00:35,  1.06img/s, loss (batch)=0.89]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 2/40:  15%|█▌        | 6/40 [00:05<00:32,  1.06img/s, loss (batch)=0.834]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 2/40:  20%|██        | 8/40 [00:07<00:30,  1.06img/s, loss (batch)=0.837]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 2/40:  25%|██▌       | 10/40 [00:09<00:28,  1.06img/s, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 2/40:  30%|███       | 12/40 [00:11<00:26,  1.05img/s, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 2/40:  42%|████▎     | 17/40 [00:16<00:21,  1.05img/s, loss (batch)=0.853]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 2/40:  52%|█████▎    | 21/40 [00:19<00:18,  1.05img/s, loss (batch)=0.833]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 2/40:  57%|█████▊    | 23/40 [00:21<00:16,  1.05img/s, loss (batch)=0.859]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 2/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.05img/s, loss (batch)=0.922]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 2/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.05img/s, loss (batch)=0.903]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 2/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.05img/s, loss (batch)=0.936]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 2/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.05img/s, loss (batch)=0.875]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 2/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.05img/s, loss (batch)=0.887]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 2/40: 100%|██████████| 40/40 [00:38<00:00,  1.05img/s, loss (batch)=1.01]
Epoch 3/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 3/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.828]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 3/40:  15%|█▌        | 6/40 [00:05<00:32,  1.05img/s, loss (batch)=0.856]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 3/40:  20%|██        | 8/40 [00:07<00:30,  1.05img/s, loss (batch)=0.93]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 3/40:  25%|██▌       | 10/40 [00:09<00:28,  1.05img/s, loss (batch)=0.876]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 3/40:  38%|███▊      | 15/40 [00:14<00:23,  1.05img/s, loss (batch)=0.822]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 3/40:  42%|████▎     | 17/40 [00:16<00:21,  1.05img/s, loss (batch)=0.813]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 3/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.05img/s, loss (batch)=0.825]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 3/40:  57%|█████▊    | 23/40 [00:21<00:16,  1.05img/s, loss (batch)=0.834]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 3/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.05img/s, loss (batch)=0.901]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 3/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.05img/s, loss (batch)=0.884]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 3/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.05img/s, loss (batch)=0.915]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 3/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.05img/s, loss (batch)=0.857]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 3/40: 100%|██████████| 40/40 [00:38<00:00,  1.05img/s, loss (batch)=0.848]
Epoch 4/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 4/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.841]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 4/40:  15%|█▌        | 6/40 [00:05<00:32,  1.05img/s, loss (batch)=0.849]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 4/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.859]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 4/40:  35%|███▌      | 14/40 [00:13<00:25,  1.03img/s, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 4/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.843]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 4/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.01img/s, loss (batch)=0.867]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 4/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.01img/s, loss (batch)=0.878]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 4/40:  68%|██████▊   | 27/40 [00:26<00:13,  1.02s/img, loss (batch)=0.823]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 4/40:  75%|███████▌  | 30/40 [00:29<00:10,  1.05s/img, loss (batch)=0.861]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 4/40:  80%|████████  | 32/40 [00:31<00:08,  1.08s/img, loss (batch)=0.797]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 4/40:  85%|████████▌ | 34/40 [00:33<00:06,  1.06s/img, loss (batch)=0.879]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 4/40:  90%|█████████ | 36/40 [00:35<00:04,  1.06s/img, loss (batch)=0.843]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 4/40:  95%|█████████▌| 38/40 [00:38<00:02,  1.06s/img, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 4/40: 100%|██████████| 40/40 [00:40<00:00,  1.00s/img, loss (batch)=0.852]
Epoch 5/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 5/40:  10%|█         | 4/40 [00:03<00:35,  1.03img/s, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 5/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 5/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.867]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 5/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.851]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 5/40:  38%|███▊      | 15/40 [00:14<00:23,  1.05img/s, loss (batch)=0.808]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 5/40:  48%|████▊     | 19/40 [00:18<00:20,  1.05img/s, loss (batch)=0.862]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 5/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.05img/s, loss (batch)=0.837]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 5/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.05img/s, loss (batch)=0.88]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 5/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.05img/s, loss (batch)=0.802]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])


Epoch 5/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.05img/s, loss (batch)=0.798]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 5/40:  90%|█████████ | 36/40 [00:34<00:03,  1.05img/s, loss (batch)=0.865]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 5/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.847]
Epoch 6/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.811]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  10%|█         | 4/40 [00:03<00:34,  1.05img/s, loss (batch)=0.843]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.835]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.825]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.856]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.837]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.838]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  40%|████      | 16/40 [00:15<00:23,  1.02img/s, loss (batch)=0.82]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.84]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.858]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.861]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  62%|██████▎   | 25/40 [00:24<00:14,  1.03img/s, loss (batch)=0.841]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.86]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.824]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.864]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.828]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.84]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 6/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.801]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 6/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.853]
Epoch 7/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.843]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  10%|█         | 4/40 [00:03<00:34,  1.04img/s, loss (batch)=0.799]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.854]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  20%|██        | 8/40 [00:07<00:30,  1.05img/s, loss (batch)=0.84]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.865]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.869]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  38%|███▊      | 15/40 [00:14<00:24,  1.04img/s, loss (batch)=0.845]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.851]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.843]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.864]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  62%|██████▎   | 25/40 [00:24<00:14,  1.04img/s, loss (batch)=0.811]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.824]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.854]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  82%|████████▎ | 33/40 [00:31<00:07,  1.03s/img, loss (batch)=0.814]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  85%|████████▌ | 34/40 [00:33<00:06,  1.07s/img, loss (batch)=0.844]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  90%|█████████ | 36/40 [00:35<00:04,  1.13s/img, loss (batch)=0.83]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 7/40:  95%|█████████▌| 38/40 [00:37<00:02,  1.13s/img, loss (batch)=0.789]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 7/40: 100%|██████████| 40/40 [00:39<00:00,  1.00img/s, loss (batch)=0.803]
Epoch 8/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:   5%|▌         | 2/40 [00:02<00:41,  1.09s/img, loss (batch)=0.86]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:   8%|▊         | 3/40 [00:03<00:40,  1.10s/img, loss (batch)=0.86]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  12%|█▎        | 5/40 [00:05<00:37,  1.08s/img, loss (batch)=0.805]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  18%|█▊        | 7/40 [00:07<00:35,  1.08s/img, loss (batch)=0.838]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  22%|██▎       | 9/40 [00:09<00:33,  1.09s/img, loss (batch)=0.848]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  28%|██▊       | 11/40 [00:12<00:32,  1.11s/img, loss (batch)=0.793]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  32%|███▎      | 13/40 [00:14<00:30,  1.14s/img, loss (batch)=0.833]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  35%|███▌      | 14/40 [00:15<00:30,  1.16s/img, loss (batch)=0.832]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  40%|████      | 16/40 [00:17<00:27,  1.15s/img, loss (batch)=0.833]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  45%|████▌     | 18/40 [00:20<00:24,  1.11s/img, loss (batch)=0.862]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  50%|█████     | 20/40 [00:22<00:22,  1.11s/img, loss (batch)=0.841]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  55%|█████▌    | 22/40 [00:24<00:19,  1.10s/img, loss (batch)=0.825]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  57%|█████▊    | 23/40 [00:25<00:18,  1.10s/img, loss (batch)=0.834]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  62%|██████▎   | 25/40 [00:27<00:16,  1.09s/img, loss (batch)=0.836]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  68%|██████▊   | 27/40 [00:29<00:14,  1.09s/img, loss (batch)=0.809]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  72%|███████▎  | 29/40 [00:32<00:11,  1.09s/img, loss (batch)=0.814]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  78%|███████▊  | 31/40 [00:34<00:09,  1.09s/img, loss (batch)=0.838]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  82%|████████▎ | 33/40 [00:36<00:07,  1.09s/img, loss (batch)=0.812]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  88%|████████▊ | 35/40 [00:38<00:05,  1.09s/img, loss (batch)=0.822]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  90%|█████████ | 36/40 [00:39<00:04,  1.09s/img, loss (batch)=0.849]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 8/40:  95%|█████████▌| 38/40 [00:41<00:02,  1.11s/img, loss (batch)=0.844]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 8/40: 100%|██████████| 40/40 [00:44<00:00,  1.11s/img, loss (batch)=0.819]
Epoch 9/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:   5%|▌         | 2/40 [00:02<00:44,  1.18s/img, loss (batch)=0.831]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:   8%|▊         | 3/40 [00:03<00:42,  1.14s/img, loss (batch)=0.83]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  12%|█▎        | 5/40 [00:05<00:38,  1.11s/img, loss (batch)=0.88]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  18%|█▊        | 7/40 [00:07<00:36,  1.11s/img, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  22%|██▎       | 9/40 [00:10<00:33,  1.09s/img, loss (batch)=0.798]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  25%|██▌       | 10/40 [00:11<00:32,  1.09s/img, loss (batch)=0.863]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  30%|███       | 12/40 [00:13<00:30,  1.10s/img, loss (batch)=0.806]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  35%|███▌      | 14/40 [00:15<00:29,  1.12s/img, loss (batch)=0.868]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  40%|████      | 16/40 [00:17<00:27,  1.13s/img, loss (batch)=0.798]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  45%|████▌     | 18/40 [00:20<00:24,  1.11s/img, loss (batch)=0.853]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  48%|████▊     | 19/40 [00:21<00:23,  1.11s/img, loss (batch)=0.851]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  52%|█████▎    | 21/40 [00:23<00:21,  1.12s/img, loss (batch)=0.871]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  57%|█████▊    | 23/40 [00:25<00:19,  1.14s/img, loss (batch)=0.812]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  62%|██████▎   | 25/40 [00:28<00:17,  1.13s/img, loss (batch)=0.837]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  65%|██████▌   | 26/40 [00:29<00:16,  1.16s/img, loss (batch)=0.878]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  70%|███████   | 28/40 [00:31<00:15,  1.26s/img, loss (batch)=0.83]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  72%|███████▎  | 29/40 [00:33<00:13,  1.27s/img, loss (batch)=0.831]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  78%|███████▊  | 31/40 [00:35<00:11,  1.26s/img, loss (batch)=0.842]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  80%|████████  | 32/40 [00:37<00:10,  1.28s/img, loss (batch)=0.814]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  85%|████████▌ | 34/40 [00:39<00:07,  1.29s/img, loss (batch)=0.855]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  88%|████████▊ | 35/40 [00:40<00:06,  1.31s/img, loss (batch)=0.824]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  92%|█████████▎| 37/40 [00:43<00:03,  1.25s/img, loss (batch)=0.831]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 9/40:  98%|█████████▊| 39/40 [00:45<00:01,  1.20s/img, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 9/40: 100%|██████████| 40/40 [00:46<00:00,  1.17s/img, loss (batch)=0.811]
Epoch 10/40:   2%|▎         | 1/40 [00:01<00:42,  1.10s/img, loss (batch)=0.872]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:   8%|▊         | 3/40 [00:03<00:41,  1.13s/img, loss (batch)=0.841]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  10%|█         | 4/40 [00:04<00:40,  1.13s/img, loss (batch)=0.871]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  15%|█▌        | 6/40 [00:06<00:37,  1.11s/img, loss (batch)=0.844]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  20%|██        | 8/40 [00:08<00:35,  1.12s/img, loss (batch)=0.805]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  25%|██▌       | 10/40 [00:11<00:33,  1.11s/img, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  28%|██▊       | 11/40 [00:12<00:32,  1.13s/img, loss (batch)=0.856]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  32%|███▎      | 13/40 [00:14<00:30,  1.15s/img, loss (batch)=0.832]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  38%|███▊      | 15/40 [00:16<00:28,  1.14s/img, loss (batch)=0.784]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  42%|████▎     | 17/40 [00:19<00:25,  1.12s/img, loss (batch)=0.852]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  48%|████▊     | 19/40 [00:21<00:23,  1.11s/img, loss (batch)=0.795]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  50%|█████     | 20/40 [00:22<00:22,  1.10s/img, loss (batch)=0.827]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])

Epoch 10/40:  55%|█████▌    | 22/40 [00:24<00:19,  1.10s/img, loss (batch)=0.859]
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  60%|██████    | 24/40 [00:26<00:17,  1.08s/img, loss (batch)=0.837]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  65%|██████▌   | 26/40 [00:28<00:14,  1.07s/img, loss (batch)=0.82]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  70%|███████   | 28/40 [00:30<00:12,  1.06s/img, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  75%|███████▌  | 30/40 [00:32<00:10,  1.05s/img, loss (batch)=0.809]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  80%|████████  | 32/40 [00:35<00:08,  1.06s/img, loss (batch)=0.857]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  85%|████████▌ | 34/40 [00:37<00:06,  1.07s/img, loss (batch)=0.836]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  90%|█████████ | 36/40 [00:39<00:04,  1.07s/img, loss (batch)=0.84]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  92%|█████████▎| 37/40 [00:40<00:03,  1.08s/img, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 10/40:  98%|█████████▊| 39/40 [00:42<00:01,  1.13s/img, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 10/40: 100%|██████████| 40/40 [00:44<00:00,  1.10s/img, loss (batch)=0.858]
Epoch 11/40:   2%|▎         | 1/40 [00:01<00:45,  1.16s/img, loss (batch)=0.833]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:   8%|▊         | 3/40 [00:03<00:40,  1.08s/img, loss (batch)=0.791]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  12%|█▎        | 5/40 [00:05<00:37,  1.07s/img, loss (batch)=0.857]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  15%|█▌        | 6/40 [00:06<00:36,  1.08s/img, loss (batch)=0.857]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  20%|██        | 8/40 [00:08<00:34,  1.08s/img, loss (batch)=0.835]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  25%|██▌       | 10/40 [00:10<00:32,  1.07s/img, loss (batch)=0.815]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  30%|███       | 12/40 [00:12<00:30,  1.08s/img, loss (batch)=0.841]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  35%|███▌      | 14/40 [00:15<00:28,  1.08s/img, loss (batch)=0.851]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  40%|████      | 16/40 [00:17<00:26,  1.10s/img, loss (batch)=0.853]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  42%|████▎     | 17/40 [00:18<00:25,  1.11s/img, loss (batch)=0.824]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  48%|████▊     | 19/40 [00:20<00:22,  1.09s/img, loss (batch)=0.819]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  52%|█████▎    | 21/40 [00:22<00:20,  1.09s/img, loss (batch)=0.816]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  57%|█████▊    | 23/40 [00:24<00:18,  1.08s/img, loss (batch)=0.784]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  62%|██████▎   | 25/40 [00:27<00:16,  1.11s/img, loss (batch)=0.824]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  65%|██████▌   | 26/40 [00:28<00:15,  1.14s/img, loss (batch)=0.823]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  70%|███████   | 28/40 [00:30<00:13,  1.15s/img, loss (batch)=0.827]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  75%|███████▌  | 30/40 [00:32<00:11,  1.11s/img, loss (batch)=0.822]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  80%|████████  | 32/40 [00:35<00:08,  1.10s/img, loss (batch)=0.805]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  85%|████████▌ | 34/40 [00:37<00:06,  1.09s/img, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  90%|█████████ | 36/40 [00:39<00:04,  1.08s/img, loss (batch)=0.887]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  95%|█████████▌| 38/40 [00:41<00:02,  1.07s/img, loss (batch)=0.849]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 11/40:  98%|█████████▊| 39/40 [00:42<00:01,  1.08s/img, loss (batch)=0.803]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 11/40: 100%|██████████| 40/40 [00:43<00:00,  1.09s/img, loss (batch)=0.794]
Epoch 12/40:   2%|▎         | 1/40 [00:01<00:41,  1.06s/img, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:   8%|▊         | 3/40 [00:03<00:39,  1.08s/img, loss (batch)=0.85]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  12%|█▎        | 5/40 [00:05<00:37,  1.08s/img, loss (batch)=0.841]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  18%|█▊        | 7/40 [00:07<00:35,  1.08s/img, loss (batch)=0.799]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  22%|██▎       | 9/40 [00:09<00:33,  1.08s/img, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  28%|██▊       | 11/40 [00:11<00:31,  1.07s/img, loss (batch)=0.839]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  30%|███       | 12/40 [00:12<00:30,  1.08s/img, loss (batch)=0.828]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  35%|███▌      | 14/40 [00:15<00:29,  1.13s/img, loss (batch)=0.829]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  40%|████      | 16/40 [00:17<00:27,  1.15s/img, loss (batch)=0.834]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  42%|████▎     | 17/40 [00:18<00:26,  1.16s/img, loss (batch)=0.842]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  48%|████▊     | 19/40 [00:21<00:24,  1.18s/img, loss (batch)=0.832]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  52%|█████▎    | 21/40 [00:23<00:21,  1.13s/img, loss (batch)=0.846]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  57%|█████▊    | 23/40 [00:25<00:19,  1.12s/img, loss (batch)=0.78]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  62%|██████▎   | 25/40 [00:27<00:16,  1.10s/img, loss (batch)=0.792]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  68%|██████▊   | 27/40 [00:29<00:14,  1.08s/img, loss (batch)=0.811]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  70%|███████   | 28/40 [00:30<00:12,  1.08s/img, loss (batch)=0.807]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  75%|███████▌  | 30/40 [00:33<00:10,  1.08s/img, loss (batch)=0.847]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  80%|████████  | 32/40 [00:35<00:08,  1.08s/img, loss (batch)=0.841]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  85%|████████▌ | 34/40 [00:37<00:06,  1.08s/img, loss (batch)=0.817]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  90%|█████████ | 36/40 [00:39<00:04,  1.08s/img, loss (batch)=0.832]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 12/40:  95%|█████████▌| 38/40 [00:41<00:02,  1.07s/img, loss (batch)=0.814]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 12/40: 100%|██████████| 40/40 [00:43<00:00,  1.10s/img, loss (batch)=0.81]
Epoch 13/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:   2%|▎         | 1/40 [00:01<00:42,  1.08s/img, loss (batch)=0.818]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:   8%|▊         | 3/40 [00:03<00:39,  1.08s/img, loss (batch)=0.813]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  12%|█▎        | 5/40 [00:05<00:38,  1.09s/img, loss (batch)=0.815]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  18%|█▊        | 7/40 [00:07<00:35,  1.09s/img, loss (batch)=0.858]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  22%|██▎       | 9/40 [00:09<00:33,  1.08s/img, loss (batch)=0.823]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  28%|██▊       | 11/40 [00:11<00:31,  1.10s/img, loss (batch)=0.867]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  30%|███       | 12/40 [00:13<00:30,  1.09s/img, loss (batch)=0.835]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  35%|███▌      | 14/40 [00:15<00:28,  1.08s/img, loss (batch)=0.822]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  40%|████      | 16/40 [00:17<00:26,  1.09s/img, loss (batch)=0.803]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  45%|████▌     | 18/40 [00:19<00:23,  1.08s/img, loss (batch)=0.83]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  50%|█████     | 20/40 [00:21<00:21,  1.08s/img, loss (batch)=0.832]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  55%|█████▌    | 22/40 [00:23<00:19,  1.09s/img, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  57%|█████▊    | 23/40 [00:25<00:18,  1.11s/img, loss (batch)=0.85]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  62%|██████▎   | 25/40 [00:27<00:16,  1.12s/img, loss (batch)=0.796]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  68%|██████▊   | 27/40 [00:29<00:14,  1.14s/img, loss (batch)=0.838]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  72%|███████▎  | 29/40 [00:32<00:12,  1.18s/img, loss (batch)=0.819]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  75%|███████▌  | 30/40 [00:33<00:11,  1.19s/img, loss (batch)=0.838]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  80%|████████  | 32/40 [00:35<00:09,  1.15s/img, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  85%|████████▌ | 34/40 [00:37<00:06,  1.13s/img, loss (batch)=0.806]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  90%|█████████ | 36/40 [00:39<00:04,  1.12s/img, loss (batch)=0.82]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  92%|█████████▎| 37/40 [00:41<00:03,  1.12s/img, loss (batch)=0.818]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 13/40:  98%|█████████▊| 39/40 [00:43<00:01,  1.12s/img, loss (batch)=0.838]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 13/40: 100%|██████████| 40/40 [00:44<00:00,  1.11s/img, loss (batch)=0.832]
Epoch 14/40:   2%|▎         | 1/40 [00:01<00:43,  1.13s/img, loss (batch)=0.837]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:   8%|▊         | 3/40 [00:03<00:41,  1.12s/img, loss (batch)=0.787]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  12%|█▎        | 5/40 [00:05<00:38,  1.11s/img, loss (batch)=0.832]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  15%|█▌        | 6/40 [00:06<00:37,  1.11s/img, loss (batch)=0.838]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  20%|██        | 8/40 [00:08<00:35,  1.12s/img, loss (batch)=0.82]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  25%|██▌       | 10/40 [00:11<00:34,  1.15s/img, loss (batch)=0.809]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  30%|███       | 12/40 [00:13<00:32,  1.15s/img, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  32%|███▎      | 13/40 [00:14<00:31,  1.16s/img, loss (batch)=0.81]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  38%|███▊      | 15/40 [00:17<00:29,  1.17s/img, loss (batch)=0.832]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  42%|████▎     | 17/40 [00:19<00:24,  1.07s/img, loss (batch)=0.84]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  48%|████▊     | 19/40 [00:21<00:21,  1.01s/img, loss (batch)=0.816]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  52%|█████▎    | 21/40 [00:22<00:18,  1.01img/s, loss (batch)=0.79]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  57%|█████▊    | 23/40 [00:24<00:16,  1.02img/s, loss (batch)=0.821]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  62%|██████▎   | 25/40 [00:26<00:14,  1.03img/s, loss (batch)=0.827]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  70%|███████   | 28/40 [00:29<00:11,  1.04img/s, loss (batch)=0.762]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  75%|███████▌  | 30/40 [00:31<00:09,  1.04img/s, loss (batch)=0.844]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  80%|████████  | 32/40 [00:33<00:07,  1.04img/s, loss (batch)=0.798]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  85%|████████▌ | 34/40 [00:35<00:05,  1.04img/s, loss (batch)=0.836]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  90%|█████████ | 36/40 [00:37<00:03,  1.04img/s, loss (batch)=0.801]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 14/40:  95%|█████████▌| 38/40 [00:39<00:01,  1.04img/s, loss (batch)=0.806]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 14/40: 100%|██████████| 40/40 [00:41<00:00,  1.03s/img, loss (batch)=0.827]
Epoch 15/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.783]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  10%|█         | 4/40 [00:03<00:34,  1.04img/s, loss (batch)=0.822]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.813]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.82]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.814]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  32%|███▎      | 13/40 [00:12<00:26,  1.02img/s, loss (batch)=0.851]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  38%|███▊      | 15/40 [00:14<00:24,  1.01img/s, loss (batch)=0.818]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  42%|████▎     | 17/40 [00:16<00:22,  1.02img/s, loss (batch)=0.798]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  48%|████▊     | 19/40 [00:18<00:20,  1.03img/s, loss (batch)=0.832]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.03img/s, loss (batch)=0.829]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.03img/s, loss (batch)=0.78]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  62%|██████▎   | 25/40 [00:24<00:14,  1.04img/s, loss (batch)=0.846]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  68%|██████▊   | 27/40 [00:26<00:12,  1.04img/s, loss (batch)=0.81]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  72%|███████▎  | 29/40 [00:28<00:10,  1.02img/s, loss (batch)=0.805]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  78%|███████▊  | 31/40 [00:30<00:08,  1.02img/s, loss (batch)=0.82]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  82%|████████▎ | 33/40 [00:32<00:07,  1.13s/img, loss (batch)=0.786]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  85%|████████▌ | 34/40 [00:33<00:07,  1.20s/img, loss (batch)=0.829]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  90%|█████████ | 36/40 [00:36<00:04,  1.17s/img, loss (batch)=0.792]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 15/40:  95%|█████████▌| 38/40 [00:38<00:02,  1.07s/img, loss (batch)=0.803]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 15/40: 100%|██████████| 40/40 [00:40<00:00,  1.01s/img, loss (batch)=0.773]
Epoch 16/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:   5%|▌         | 2/40 [00:01<00:36,  1.04img/s, loss (batch)=0.833]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  10%|█         | 4/40 [00:03<00:34,  1.04img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.848]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.769]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  38%|███▊      | 15/40 [00:14<00:23,  1.04img/s, loss (batch)=0.805]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.813]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.807]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.805]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.801]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.04img/s, loss (batch)=0.816]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.82]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.785]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.815]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.785]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.794]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 16/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.82]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 16/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.823]
Epoch 17/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:   5%|▌         | 2/40 [00:01<00:36,  1.04img/s, loss (batch)=0.78]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  10%|█         | 4/40 [00:03<00:34,  1.04img/s, loss (batch)=0.829]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.805]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.769]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.819]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.822]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.827]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.791]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.792]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.797]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.785]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.786]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.81]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 17/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.04img/s, loss (batch)=0.808]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 17/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.773]
Epoch 18/40:   2%|▎         | 1/40 [00:00<00:37,  1.05img/s, loss (batch)=0.787]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:   8%|▊         | 3/40 [00:02<00:35,  1.04img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.794]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.786]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.784]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.823]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.781]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.804]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.78]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.79]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.832]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.785]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.803]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.794]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.812]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 18/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.819]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 18/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.78]
Epoch 19/40:   2%|▎         | 1/40 [00:00<00:37,  1.04img/s, loss (batch)=0.787]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:   8%|▊         | 3/40 [00:02<00:35,  1.04img/s, loss (batch)=0.777]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.774]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.814]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.781]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.772]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  32%|███▎      | 13/40 [00:12<00:25,  1.04img/s, loss (batch)=0.803]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  38%|███▊      | 15/40 [00:14<00:23,  1.04img/s, loss (batch)=0.801]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.797]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.774]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.833]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.799]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.811]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.854]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.797]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.783]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.817]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 19/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.794]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 19/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.814]
Epoch 20/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  10%|█         | 4/40 [00:03<00:34,  1.04img/s, loss (batch)=0.798]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.773]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  22%|██▎       | 9/40 [00:08<00:29,  1.05img/s, loss (batch)=0.825]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  32%|███▎      | 13/40 [00:12<00:25,  1.05img/s, loss (batch)=0.793]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  38%|███▊      | 15/40 [00:14<00:23,  1.04img/s, loss (batch)=0.787]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.812]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.826]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.793]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.04img/s, loss (batch)=0.801]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.827]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.784]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.767]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 20/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.773]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 20/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.773]
Epoch 21/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.809]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  10%|█         | 4/40 [00:03<00:34,  1.05img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.782]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.798]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.783]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.779]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.814]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.04img/s, loss (batch)=0.789]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.781]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.777]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.783]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.773]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.767]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 21/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.781]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 21/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.807]
Epoch 22/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.756]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  10%|█         | 4/40 [00:03<00:34,  1.04img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.772]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.792]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.781]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.812]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.782]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.804]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])

Epoch 22/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.793]
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.765]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.04img/s, loss (batch)=0.78]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.756]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.792]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 22/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.04img/s, loss (batch)=0.777]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 22/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.787]
Epoch 23/40:   2%|▎         | 1/40 [00:00<00:37,  1.04img/s, loss (batch)=0.769]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:   8%|▊         | 3/40 [00:02<00:35,  1.04img/s, loss (batch)=0.805]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.787]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.763]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.786]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.791]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.763]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.784]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.821]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.742]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.786]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.792]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.797]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 23/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 23/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.753]
Epoch 24/40:   2%|▎         | 1/40 [00:00<00:37,  1.05img/s, loss (batch)=0.777]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:   8%|▊         | 3/40 [00:02<00:35,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.793]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.78]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.784]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.784]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.754]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.811]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.749]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.777]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.769]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.767]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 24/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.04img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 24/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.807]
Epoch 25/40:   2%|▎         | 1/40 [00:00<00:36,  1.05img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:   8%|▊         | 3/40 [00:02<00:35,  1.04img/s, loss (batch)=0.731]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.782]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  32%|███▎      | 13/40 [00:12<00:25,  1.04img/s, loss (batch)=0.78]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  38%|███▊      | 15/40 [00:14<00:24,  1.04img/s, loss (batch)=0.791]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.772]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.783]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.763]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.783]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.756]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.769]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.05img/s, loss (batch)=0.795]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.774]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.757]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 25/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.755]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 25/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.78]
Epoch 26/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:   5%|▌         | 2/40 [00:01<00:36,  1.04img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.754]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.759]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.73]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.787]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  32%|███▎      | 13/40 [00:12<00:25,  1.04img/s, loss (batch)=0.768]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  38%|███▊      | 15/40 [00:14<00:23,  1.04img/s, loss (batch)=0.796]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.747]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.768]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.747]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.793]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.804]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.777]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 26/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 26/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.766]
Epoch 27/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.729]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  10%|█         | 4/40 [00:03<00:34,  1.05img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.773]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  20%|██        | 8/40 [00:07<00:30,  1.05img/s, loss (batch)=0.754]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.782]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  32%|███▎      | 13/40 [00:12<00:25,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  38%|███▊      | 15/40 [00:14<00:23,  1.04img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.751]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.802]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.781]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.799]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.05img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 27/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.05img/s, loss (batch)=0.796]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 27/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.763]
Epoch 28/40:   2%|▎         | 1/40 [00:00<00:37,  1.05img/s, loss (batch)=0.78]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:   8%|▊         | 3/40 [00:02<00:35,  1.05img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.777]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.797]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.727]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.741]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.81]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])

Epoch 28/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.789]
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 28/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.04img/s, loss (batch)=0.765]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 28/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.752]
Epoch 29/40:   2%|▎         | 1/40 [00:00<00:37,  1.05img/s, loss (batch)=0.795]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:   8%|▊         | 3/40 [00:02<00:35,  1.05img/s, loss (batch)=0.783]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  12%|█▎        | 5/40 [00:04<00:33,  1.05img/s, loss (batch)=0.756]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  18%|█▊        | 7/40 [00:06<00:31,  1.05img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.772]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.791]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  35%|███▌      | 14/40 [00:13<00:25,  1.04img/s, loss (batch)=0.756]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.768]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.793]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.76]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.806]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.768]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.732]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.787]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.792]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.801]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.772]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 29/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.04img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 29/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.801]
Epoch 30/40:   2%|▎         | 1/40 [00:00<00:36,  1.05img/s, loss (batch)=0.774]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:   8%|▊         | 3/40 [00:02<00:35,  1.04img/s, loss (batch)=0.782]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.774]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])

Epoch 30/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.752]
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  32%|███▎      | 13/40 [00:12<00:26,  1.04img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  38%|███▊      | 15/40 [00:14<00:24,  1.04img/s, loss (batch)=0.751]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.751]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.742]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.789]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.791]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.785]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.8]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 30/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.762]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 30/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.765]
Epoch 31/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.76]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.785]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.769]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  32%|███▎      | 13/40 [00:12<00:25,  1.04img/s, loss (batch)=0.782]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  38%|███▊      | 15/40 [00:14<00:23,  1.04img/s, loss (batch)=0.797]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])

Epoch 31/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.768]
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.757]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  62%|██████▎   | 25/40 [00:24<00:14,  1.04img/s, loss (batch)=0.745]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.791]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.769]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 31/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.792]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 31/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.798]
Epoch 32/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.769]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  10%|█         | 4/40 [00:03<00:34,  1.04img/s, loss (batch)=0.773]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.749]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.749]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.746]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  32%|███▎      | 13/40 [00:12<00:25,  1.05img/s, loss (batch)=0.76]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  38%|███▊      | 15/40 [00:14<00:24,  1.04img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.76]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.768]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.777]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  62%|██████▎   | 25/40 [00:23<00:14,  1.04img/s, loss (batch)=0.755]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.78]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.746]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 32/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.756]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 32/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.79]
Epoch 33/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:   5%|▌         | 2/40 [00:01<00:36,  1.04img/s, loss (batch)=0.76]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  10%|█         | 4/40 [00:03<00:34,  1.04img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.774]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.757]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  35%|███▌      | 14/40 [00:13<00:25,  1.04img/s, loss (batch)=0.724]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.762]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.794]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.741]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.747]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  62%|██████▎   | 25/40 [00:24<00:14,  1.04img/s, loss (batch)=0.749]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.755]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.767]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.757]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.03img/s, loss (batch)=0.765]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.03img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.751]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 33/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.04img/s, loss (batch)=0.769]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 33/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.76]
Epoch 34/40:   2%|▎         | 1/40 [00:00<00:37,  1.05img/s, loss (batch)=0.734]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:   8%|▊         | 3/40 [00:02<00:35,  1.04img/s, loss (batch)=0.792]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.741]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.756]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.759]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.757]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.763]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])

Epoch 34/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.768]
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.03img/s, loss (batch)=0.75]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.743]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  65%|██████▌   | 26/40 [00:25<00:13,  1.04img/s, loss (batch)=0.75]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  70%|███████   | 28/40 [00:26<00:11,  1.03img/s, loss (batch)=0.767]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.789]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.768]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 34/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.03img/s, loss (batch)=0.782]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 34/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.786]
Epoch 35/40:   2%|▎         | 1/40 [00:00<00:37,  1.04img/s, loss (batch)=0.748]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:   8%|▊         | 3/40 [00:02<00:35,  1.04img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.791]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.779]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.718]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.765]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  32%|███▎      | 13/40 [00:12<00:26,  1.04img/s, loss (batch)=0.742]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  38%|███▊      | 15/40 [00:14<00:24,  1.04img/s, loss (batch)=0.791]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.75]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.744]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.742]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.756]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  65%|██████▌   | 26/40 [00:25<00:13,  1.04img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.767]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 35/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.759]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 35/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.75]
Epoch 36/40:   0%|          | 0/40 [00:00<?, ?img/s]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:   8%|▊         | 3/40 [00:02<00:35,  1.03img/s, loss (batch)=0.793]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.789]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.765]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.768]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.747]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  38%|███▊      | 15/40 [00:14<00:24,  1.04img/s, loss (batch)=0.782]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.747]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.771]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  62%|██████▎   | 25/40 [00:24<00:14,  1.04img/s, loss (batch)=0.749]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.737]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.735]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.764]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 36/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.755]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
Epoch 36/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.752]
Epoch 37/40:   0%|          | 0/40 [00:00<?, ?img/s]
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:   5%|▌         | 2/40 [00:01<00:36,  1.05img/s, loss (batch)=0.743]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  10%|█         | 4/40 [00:03<00:34,  1.04img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  15%|█▌        | 6/40 [00:05<00:32,  1.04img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.759]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  25%|██▌       | 10/40 [00:09<00:29,  1.03img/s, loss (batch)=0.775]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.748]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  35%|███▌      | 14/40 [00:13<00:24,  1.04img/s, loss (batch)=0.747]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.75]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.785]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.743]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  62%|██████▎   | 25/40 [00:24<00:14,  1.04img/s, loss (batch)=0.763]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  68%|██████▊   | 27/40 [00:25<00:12,  1.04img/s, loss (batch)=0.781]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  72%|███████▎  | 29/40 [00:27<00:10,  1.04img/s, loss (batch)=0.754]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  78%|███████▊  | 31/40 [00:29<00:08,  1.04img/s, loss (batch)=0.762]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.766]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.772]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.746]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 37/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.04img/s, loss (batch)=0.77]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 37/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.757]
Epoch 38/40:   2%|▎         | 1/40 [00:00<00:37,  1.05img/s, loss (batch)=0.788]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:   8%|▊         | 3/40 [00:02<00:35,  1.05img/s, loss (batch)=0.758]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.746]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  20%|██        | 8/40 [00:07<00:30,  1.04img/s, loss (batch)=0.782]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  25%|██▌       | 10/40 [00:09<00:28,  1.04img/s, loss (batch)=0.767]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  30%|███       | 12/40 [00:11<00:26,  1.04img/s, loss (batch)=0.747]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  35%|███▌      | 14/40 [00:13<00:25,  1.04img/s, loss (batch)=0.755]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  40%|████      | 16/40 [00:15<00:23,  1.04img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.746]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.778]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.762]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.728]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.774]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  82%|████████▎ | 33/40 [00:31<00:06,  1.04img/s, loss (batch)=0.75]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  88%|████████▊ | 35/40 [00:33<00:04,  1.04img/s, loss (batch)=0.767]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  92%|█████████▎| 37/40 [00:35<00:02,  1.04img/s, loss (batch)=0.747]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 38/40:  98%|█████████▊| 39/40 [00:37<00:00,  1.04img/s, loss (batch)=0.786]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 38/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.775]
Epoch 39/40:   2%|▎         | 1/40 [00:00<00:37,  1.05img/s, loss (batch)=0.734]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:   8%|▊         | 3/40 [00:02<00:35,  1.05img/s, loss (batch)=0.741]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.713]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.786]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.746]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  32%|███▎      | 13/40 [00:12<00:25,  1.04img/s, loss (batch)=0.748]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  38%|███▊      | 15/40 [00:14<00:23,  1.04img/s, loss (batch)=0.763]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  45%|████▌     | 18/40 [00:17<00:21,  1.04img/s, loss (batch)=0.785]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  50%|█████     | 20/40 [00:19<00:19,  1.04img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  55%|█████▌    | 22/40 [00:21<00:17,  1.04img/s, loss (batch)=0.756]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  60%|██████    | 24/40 [00:23<00:15,  1.04img/s, loss (batch)=0.753]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.743]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.765]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.761]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.755]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.04img/s, loss (batch)=0.737]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  90%|█████████ | 36/40 [00:34<00:03,  1.04img/s, loss (batch)=0.733]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 39/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.783]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
Epoch 39/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.765]
Epoch 40/40:   2%|▎         | 1/40 [00:00<00:37,  1.05img/s, loss (batch)=0.731]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:   8%|▊         | 3/40 [00:02<00:35,  1.05img/s, loss (batch)=0.752]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  12%|█▎        | 5/40 [00:04<00:33,  1.04img/s, loss (batch)=0.746]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  18%|█▊        | 7/40 [00:06<00:31,  1.04img/s, loss (batch)=0.76]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  22%|██▎       | 9/40 [00:08<00:29,  1.04img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  28%|██▊       | 11/40 [00:10<00:27,  1.04img/s, loss (batch)=0.755]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  32%|███▎      | 13/40 [00:12<00:25,  1.04img/s, loss (batch)=0.746]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  38%|███▊      | 15/40 [00:14<00:24,  1.04img/s, loss (batch)=0.736]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  42%|████▎     | 17/40 [00:16<00:22,  1.04img/s, loss (batch)=0.728]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  48%|████▊     | 19/40 [00:18<00:20,  1.04img/s, loss (batch)=0.786]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  52%|█████▎    | 21/40 [00:20<00:18,  1.04img/s, loss (batch)=0.742]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  57%|█████▊    | 23/40 [00:22<00:16,  1.04img/s, loss (batch)=0.776]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  65%|██████▌   | 26/40 [00:24<00:13,  1.04img/s, loss (batch)=0.744]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  70%|███████   | 28/40 [00:26<00:11,  1.04img/s, loss (batch)=0.765]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  75%|███████▌  | 30/40 [00:28<00:09,  1.04img/s, loss (batch)=0.755]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  80%|████████  | 32/40 [00:30<00:07,  1.04img/s, loss (batch)=0.74]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  85%|████████▌ | 34/40 [00:32<00:05,  1.03img/s, loss (batch)=0.755]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  90%|█████████ | 36/40 [00:34<00:03,  1.03img/s, loss (batch)=0.762]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40:  95%|█████████▌| 38/40 [00:36<00:01,  1.04img/s, loss (batch)=0.742]
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])
dice_loss:input torch.Size([1, 1, 600, 250])
images_shape torch.Size([1, 3, 600, 250])
true_masks_shape torch.Size([1, 600, 250, 1])
masks_permute torch.Size([1, 1, 600, 250])
masks_pred torch.Size([1, 1, 600, 250])
dice_loss:target torch.Size([1, 1, 600, 250])

Epoch 40/40: 100%|██████████| 40/40 [00:38<00:00,  1.04img/s, loss (batch)=0.776]
[4mReloaded modules[24m: tools.data_loading, tools.dice_score, evaluate, unet_model, unet_parts
[4mReloaded modules[24m: tools.data_loading, unet_model, unet_parts
[4mReloaded modules[24m: tools.data_loading, unet_model, unet_parts
[4mReloaded modules[24m: tools.data_loading, unet_model, unet_parts
[4mReloaded modules[24m: tools.data_loading, unet_model, unet_parts
[4mReloaded modules[24m: tools.data_loading, unet_model, unet_parts
[4mReloaded modules[24m: tools.data_loading, unet_model, unet_parts
[4mReloaded modules[24m: tools.data_loading, unet_model, unet_parts
[4mReloaded modules[24m: engine, utils_rcnn, coco_eval, coco_utils, transforms, SpineDataset, ShowBbox
Epoch: [0]  [ 0/40]  eta: 0:00:13  lr: 0.000008  loss: 1.6629 (1.6629)  loss_classifier: 0.7240 (0.7240)  loss_box_reg: 0.1185 (0.1185)  loss_objectness: 0.6972 (0.6972)  loss_rpn_box_reg: 0.1232 (0.1232)  time: 0.3408  data: 0.0166  max mem: 1440
Epoch: [0]  [39/40]  eta: 0:00:00  lr: 0.000300  loss: 1.3427 (1.5093)  loss_classifier: 0.3491 (0.4815)  loss_box_reg: 0.2308 (0.2411)  loss_objectness: 0.6646 (0.6816)  loss_rpn_box_reg: 0.0778 (0.1051)  time: 0.3230  data: 0.0162  max mem: 1706
Epoch: [0] Total time: 0:00:12 (0.3160 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:04  model_time: 0.1480 (0.1480)  evaluator_time: 0.0479 (0.0479)  time: 0.2095  data: 0.0117  max mem: 1706
Test:  [19/20]  eta: 0:00:00  model_time: 0.1279 (0.1359)  evaluator_time: 0.0430 (0.0445)  time: 0.1961  data: 0.0143  max mem: 1706
Test: Total time: 0:00:03 (0.1962 s / it)
Averaged stats: model_time: 0.1279 (0.1359)  evaluator_time: 0.0430 (0.0445)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.006
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.011
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.003
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.004
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.055
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.008
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.153
=====================================
Epoch: [1]  [ 0/40]  eta: 0:00:12  lr: 0.000300  loss: 1.4322 (1.4322)  loss_classifier: 0.3370 (0.3370)  loss_box_reg: 0.3342 (0.3342)  loss_objectness: 0.6445 (0.6445)  loss_rpn_box_reg: 0.1165 (0.1165)  time: 0.3189  data: 0.0195  max mem: 1706
Epoch: [1]  [39/40]  eta: 0:00:00  lr: 0.000300  loss: 0.7318 (0.9925)  loss_classifier: 0.1647 (0.2531)  loss_box_reg: 0.1212 (0.2032)  loss_objectness: 0.3769 (0.4786)  loss_rpn_box_reg: 0.0504 (0.0576)  time: 0.3095  data: 0.0142  max mem: 1707
Epoch: [1] Total time: 0:00:12 (0.3100 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1255 (0.1255)  evaluator_time: 0.0186 (0.0186)  time: 0.1587  data: 0.0137  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1250 (0.1253)  evaluator_time: 0.0176 (0.0194)  time: 0.1587  data: 0.0127  max mem: 1707
Test: Total time: 0:00:03 (0.1589 s / it)
Averaged stats: model_time: 0.1250 (0.1253)  evaluator_time: 0.0176 (0.0194)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.011
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.049
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.002
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.007
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.054
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.007
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.041
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.056
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.080
=====================================
Epoch: [2]  [ 0/40]  eta: 0:00:12  lr: 0.000150  loss: 0.7519 (0.7519)  loss_classifier: 0.2048 (0.2048)  loss_box_reg: 0.2674 (0.2674)  loss_objectness: 0.2103 (0.2103)  loss_rpn_box_reg: 0.0694 (0.0694)  time: 0.3087  data: 0.0152  max mem: 1707
Epoch: [2]  [39/40]  eta: 0:00:00  lr: 0.000150  loss: 1.2073 (1.1010)  loss_classifier: 0.3001 (0.2825)  loss_box_reg: 0.6584 (0.5662)  loss_objectness: 0.1696 (0.2005)  loss_rpn_box_reg: 0.0485 (0.0518)  time: 0.3229  data: 0.0153  max mem: 1707
Epoch: [2] Total time: 0:00:12 (0.3170 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:04  model_time: 0.1548 (0.1548)  evaluator_time: 0.0415 (0.0415)  time: 0.2149  data: 0.0176  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1447 (0.1447)  evaluator_time: 0.0391 (0.0371)  time: 0.1982  data: 0.0150  max mem: 1707
Test: Total time: 0:00:03 (0.1983 s / it)
Averaged stats: model_time: 0.1447 (0.1447)  evaluator_time: 0.0391 (0.0371)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.061
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.207
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.008
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.066
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.102
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.015
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.072
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.231
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.282
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.123
=====================================
Epoch: [3]  [ 0/40]  eta: 0:00:13  lr: 0.000300  loss: 1.1027 (1.1027)  loss_classifier: 0.3032 (0.3032)  loss_box_reg: 0.5883 (0.5883)  loss_objectness: 0.1725 (0.1725)  loss_rpn_box_reg: 0.0387 (0.0387)  time: 0.3287  data: 0.0176  max mem: 1707
Epoch: [3]  [39/40]  eta: 0:00:00  lr: 0.000300  loss: 1.1280 (1.1625)  loss_classifier: 0.3150 (0.3160)  loss_box_reg: 0.6711 (0.6717)  loss_objectness: 0.1108 (0.1277)  loss_rpn_box_reg: 0.0422 (0.0471)  time: 0.3086  data: 0.0127  max mem: 1707
Epoch: [3] Total time: 0:00:12 (0.3218 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1256 (0.1256)  evaluator_time: 0.0332 (0.0332)  time: 0.1710  data: 0.0113  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1260 (0.1265)  evaluator_time: 0.0303 (0.0308)  time: 0.1703  data: 0.0115  max mem: 1707
Test: Total time: 0:00:03 (0.1704 s / it)
Averaged stats: model_time: 0.1260 (0.1265)  evaluator_time: 0.0303 (0.0308)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.113
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.346
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.034
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.117
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.152
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.008
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.102
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.386
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.411
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.333
=====================================
Epoch: [4]  [ 0/40]  eta: 0:00:12  lr: 0.000256  loss: 1.0429 (1.0429)  loss_classifier: 0.3457 (0.3457)  loss_box_reg: 0.6022 (0.6022)  loss_objectness: 0.0632 (0.0632)  loss_rpn_box_reg: 0.0318 (0.0318)  time: 0.3135  data: 0.0166  max mem: 1707
Epoch: [4]  [39/40]  eta: 0:00:00  lr: 0.000256  loss: 1.0277 (1.0553)  loss_classifier: 0.3298 (0.3294)  loss_box_reg: 0.6035 (0.6152)  loss_objectness: 0.0528 (0.0671)  loss_rpn_box_reg: 0.0405 (0.0435)  time: 0.3201  data: 0.0130  max mem: 1707
Epoch: [4] Total time: 0:00:12 (0.3163 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1470 (0.1470)  evaluator_time: 0.0313 (0.0313)  time: 0.1919  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1260 (0.1314)  evaluator_time: 0.0352 (0.0355)  time: 0.1802  data: 0.0117  max mem: 1707
Test: Total time: 0:00:03 (0.1802 s / it)
Averaged stats: model_time: 0.1260 (0.1314)  evaluator_time: 0.0352 (0.0355)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.127
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.412
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.021
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.123
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.190
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.015
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.108
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.399
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.404
=====================================
Epoch: [5]  [ 0/40]  eta: 0:00:12  lr: 0.000150  loss: 1.0358 (1.0358)  loss_classifier: 0.3679 (0.3679)  loss_box_reg: 0.5735 (0.5735)  loss_objectness: 0.0443 (0.0443)  loss_rpn_box_reg: 0.0501 (0.0501)  time: 0.3243  data: 0.0156  max mem: 1707
Epoch: [5]  [39/40]  eta: 0:00:00  lr: 0.000150  loss: 0.9493 (0.9854)  loss_classifier: 0.3069 (0.3109)  loss_box_reg: 0.5786 (0.5899)  loss_objectness: 0.0396 (0.0440)  loss_rpn_box_reg: 0.0386 (0.0407)  time: 0.3300  data: 0.0140  max mem: 1707
Epoch: [5] Total time: 0:00:13 (0.3269 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1387 (0.1387)  evaluator_time: 0.0273 (0.0273)  time: 0.1797  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1348 (0.1367)  evaluator_time: 0.0303 (0.0337)  time: 0.1874  data: 0.0155  max mem: 1707
Test: Total time: 0:00:03 (0.1875 s / it)
Averaged stats: model_time: 0.1348 (0.1367)  evaluator_time: 0.0303 (0.0337)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.157
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.477
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.038
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.179
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.137
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.014
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.141
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.416
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.405
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.439
=====================================
Epoch: [6]  [ 0/40]  eta: 0:00:13  lr: 0.000044  loss: 0.8498 (0.8498)  loss_classifier: 0.2523 (0.2523)  loss_box_reg: 0.5343 (0.5343)  loss_objectness: 0.0295 (0.0295)  loss_rpn_box_reg: 0.0337 (0.0337)  time: 0.3252  data: 0.0264  max mem: 1707
Epoch: [6]  [39/40]  eta: 0:00:00  lr: 0.000044  loss: 0.8815 (0.9106)  loss_classifier: 0.2890 (0.2981)  loss_box_reg: 0.5287 (0.5400)  loss_objectness: 0.0301 (0.0378)  loss_rpn_box_reg: 0.0335 (0.0346)  time: 0.3153  data: 0.0163  max mem: 1707
Epoch: [6] Total time: 0:00:12 (0.3172 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1290 (0.1290)  evaluator_time: 0.0249 (0.0249)  time: 0.1671  data: 0.0122  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1265 (0.1269)  evaluator_time: 0.0254 (0.0271)  time: 0.1679  data: 0.0126  max mem: 1707
Test: Total time: 0:00:03 (0.1681 s / it)
Averaged stats: model_time: 0.1265 (0.1269)  evaluator_time: 0.0254 (0.0271)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.153
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.459
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.035
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.162
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.136
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.016
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.133
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.413
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.395
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.451
=====================================
Epoch: [7]  [ 0/40]  eta: 0:00:13  lr: 0.000300  loss: 0.9310 (0.9310)  loss_classifier: 0.2901 (0.2901)  loss_box_reg: 0.5773 (0.5773)  loss_objectness: 0.0148 (0.0148)  loss_rpn_box_reg: 0.0489 (0.0489)  time: 0.3274  data: 0.0186  max mem: 1707
Epoch: [7]  [39/40]  eta: 0:00:00  lr: 0.000300  loss: 0.9757 (0.9754)  loss_classifier: 0.3066 (0.3067)  loss_box_reg: 0.5921 (0.5936)  loss_objectness: 0.0261 (0.0345)  loss_rpn_box_reg: 0.0367 (0.0406)  time: 0.3636  data: 0.0254  max mem: 1707
Epoch: [7] Total time: 0:00:13 (0.3453 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1431 (0.1431)  evaluator_time: 0.0274 (0.0274)  time: 0.1920  data: 0.0195  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1598 (0.1588)  evaluator_time: 0.0283 (0.0296)  time: 0.2068  data: 0.0167  max mem: 1707
Test: Total time: 0:00:04 (0.2068 s / it)
Averaged stats: model_time: 0.1598 (0.1588)  evaluator_time: 0.0283 (0.0296)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.151
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.459
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.038
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.168
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.145
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.022
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.153
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.411
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.425
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.381
=====================================
Epoch: [8]  [ 0/40]  eta: 0:00:13  lr: 0.000289  loss: 0.9614 (0.9614)  loss_classifier: 0.3558 (0.3558)  loss_box_reg: 0.5265 (0.5265)  loss_objectness: 0.0237 (0.0237)  loss_rpn_box_reg: 0.0555 (0.0555)  time: 0.3274  data: 0.0264  max mem: 1707
Epoch: [8]  [39/40]  eta: 0:00:00  lr: 0.000289  loss: 1.0182 (1.0046)  loss_classifier: 0.3417 (0.3241)  loss_box_reg: 0.5954 (0.5985)  loss_objectness: 0.0379 (0.0372)  loss_rpn_box_reg: 0.0417 (0.0447)  time: 0.3614  data: 0.0181  max mem: 1707
Epoch: [8] Total time: 0:00:14 (0.3643 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1445 (0.1445)  evaluator_time: 0.0244 (0.0244)  time: 0.1856  data: 0.0156  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1426 (0.1437)  evaluator_time: 0.0264 (0.0272)  time: 0.1879  data: 0.0154  max mem: 1707
Test: Total time: 0:00:03 (0.1880 s / it)
Averaged stats: model_time: 0.1426 (0.1437)  evaluator_time: 0.0264 (0.0272)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.201
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.523
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.091
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.225
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.231
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.027
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.178
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.428
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.460
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.360
=====================================
Epoch: [9]  [ 0/40]  eta: 0:00:14  lr: 0.000256  loss: 1.0753 (1.0753)  loss_classifier: 0.3566 (0.3566)  loss_box_reg: 0.6415 (0.6415)  loss_objectness: 0.0121 (0.0121)  loss_rpn_box_reg: 0.0652 (0.0652)  time: 0.3689  data: 0.0181  max mem: 1707
Epoch: [9]  [39/40]  eta: 0:00:00  lr: 0.000256  loss: 0.9552 (0.9740)  loss_classifier: 0.3076 (0.3076)  loss_box_reg: 0.5651 (0.5932)  loss_objectness: 0.0259 (0.0309)  loss_rpn_box_reg: 0.0399 (0.0422)  time: 0.3742  data: 0.0176  max mem: 1707
Epoch: [9] Total time: 0:00:14 (0.3688 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1470 (0.1470)  evaluator_time: 0.0234 (0.0234)  time: 0.1851  data: 0.0137  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1406 (0.1434)  evaluator_time: 0.0264 (0.0267)  time: 0.1854  data: 0.0139  max mem: 1707
Test: Total time: 0:00:03 (0.1855 s / it)
Averaged stats: model_time: 0.1406 (0.1434)  evaluator_time: 0.0264 (0.0267)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.217
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.555
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.082
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.243
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.247
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.030
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.193
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.452
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.462
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.429
=====================================
Epoch: [10]  [ 0/40]  eta: 0:00:13  lr: 0.000207  loss: 0.9048 (0.9048)  loss_classifier: 0.3042 (0.3042)  loss_box_reg: 0.5508 (0.5508)  loss_objectness: 0.0179 (0.0179)  loss_rpn_box_reg: 0.0319 (0.0319)  time: 0.3477  data: 0.0176  max mem: 1707
Epoch: [10]  [39/40]  eta: 0:00:00  lr: 0.000207  loss: 0.9132 (0.9063)  loss_classifier: 0.2887 (0.2883)  loss_box_reg: 0.5703 (0.5558)  loss_objectness: 0.0231 (0.0248)  loss_rpn_box_reg: 0.0349 (0.0373)  time: 0.3733  data: 0.0188  max mem: 1707
Epoch: [10] Total time: 0:00:14 (0.3656 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1515 (0.1515)  evaluator_time: 0.0230 (0.0230)  time: 0.1881  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1515 (0.1525)  evaluator_time: 0.0205 (0.0211)  time: 0.1878  data: 0.0128  max mem: 1707
Test: Total time: 0:00:03 (0.1879 s / it)
Averaged stats: model_time: 0.1515 (0.1525)  evaluator_time: 0.0205 (0.0211)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.313
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.676
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.201
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.359
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.269
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.034
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.276
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.505
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.462
=====================================
Epoch: [11]  [ 0/40]  eta: 0:00:14  lr: 0.000150  loss: 0.7978 (0.7978)  loss_classifier: 0.2435 (0.2435)  loss_box_reg: 0.5064 (0.5064)  loss_objectness: 0.0275 (0.0275)  loss_rpn_box_reg: 0.0205 (0.0205)  time: 0.3717  data: 0.0176  max mem: 1707
Epoch: [11]  [39/40]  eta: 0:00:00  lr: 0.000150  loss: 0.8319 (0.8419)  loss_classifier: 0.2713 (0.2727)  loss_box_reg: 0.5085 (0.5153)  loss_objectness: 0.0161 (0.0201)  loss_rpn_box_reg: 0.0344 (0.0338)  time: 0.3325  data: 0.0133  max mem: 1707
Epoch: [11] Total time: 0:00:13 (0.3382 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1377 (0.1377)  evaluator_time: 0.0215 (0.0215)  time: 0.1719  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1377 (0.1379)  evaluator_time: 0.0205 (0.0212)  time: 0.1724  data: 0.0117  max mem: 1707
Test: Total time: 0:00:03 (0.1724 s / it)
Averaged stats: model_time: 0.1377 (0.1379)  evaluator_time: 0.0205 (0.0212)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.311
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.736
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.139
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.345
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.317
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.033
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.278
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.446
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.468
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.398
=====================================
Epoch: [12]  [ 0/40]  eta: 0:00:13  lr: 0.000093  loss: 0.8580 (0.8580)  loss_classifier: 0.2495 (0.2495)  loss_box_reg: 0.5443 (0.5443)  loss_objectness: 0.0232 (0.0232)  loss_rpn_box_reg: 0.0410 (0.0410)  time: 0.3438  data: 0.0195  max mem: 1707
Epoch: [12]  [39/40]  eta: 0:00:00  lr: 0.000093  loss: 0.7987 (0.8057)  loss_classifier: 0.2533 (0.2551)  loss_box_reg: 0.4804 (0.5005)  loss_objectness: 0.0136 (0.0189)  loss_rpn_box_reg: 0.0283 (0.0312)  time: 0.3334  data: 0.0133  max mem: 1707
Epoch: [12] Total time: 0:00:13 (0.3338 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1382 (0.1382)  evaluator_time: 0.0205 (0.0205)  time: 0.1714  data: 0.0107  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1377 (0.1376)  evaluator_time: 0.0186 (0.0193)  time: 0.1702  data: 0.0118  max mem: 1707
Test: Total time: 0:00:03 (0.1702 s / it)
Averaged stats: model_time: 0.1377 (0.1376)  evaluator_time: 0.0186 (0.0193)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.408
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.858
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.272
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.437
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.356
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.038
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.322
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.525
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.523
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.530
=====================================
Epoch: [13]  [ 0/40]  eta: 0:00:13  lr: 0.000044  loss: 0.7846 (0.7846)  loss_classifier: 0.2643 (0.2643)  loss_box_reg: 0.4807 (0.4807)  loss_objectness: 0.0107 (0.0107)  loss_rpn_box_reg: 0.0289 (0.0289)  time: 0.3370  data: 0.0176  max mem: 1707
Epoch: [13]  [39/40]  eta: 0:00:00  lr: 0.000044  loss: 0.7209 (0.7432)  loss_classifier: 0.2292 (0.2311)  loss_box_reg: 0.4618 (0.4669)  loss_objectness: 0.0121 (0.0170)  loss_rpn_box_reg: 0.0285 (0.0282)  time: 0.3348  data: 0.0133  max mem: 1707
Epoch: [13] Total time: 0:00:13 (0.3343 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1392 (0.1392)  evaluator_time: 0.0215 (0.0215)  time: 0.1743  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1367 (0.1371)  evaluator_time: 0.0195 (0.0200)  time: 0.1704  data: 0.0116  max mem: 1707
Test: Total time: 0:00:03 (0.1705 s / it)
Averaged stats: model_time: 0.1367 (0.1371)  evaluator_time: 0.0195 (0.0200)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.402
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.847
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.304
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.432
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.371
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.040
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.317
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.497
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.515
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.460
=====================================
Epoch: [14]  [ 0/40]  eta: 0:00:13  lr: 0.000011  loss: 0.6576 (0.6576)  loss_classifier: 0.2327 (0.2327)  loss_box_reg: 0.3997 (0.3997)  loss_objectness: 0.0067 (0.0067)  loss_rpn_box_reg: 0.0185 (0.0185)  time: 0.3379  data: 0.0156  max mem: 1707
Epoch: [14]  [39/40]  eta: 0:00:00  lr: 0.000011  loss: 0.6879 (0.7101)  loss_classifier: 0.2250 (0.2258)  loss_box_reg: 0.4241 (0.4428)  loss_objectness: 0.0155 (0.0142)  loss_rpn_box_reg: 0.0272 (0.0274)  time: 0.3353  data: 0.0137  max mem: 1707
Epoch: [14] Total time: 0:00:13 (0.3361 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1270 (0.1270)  evaluator_time: 0.0195 (0.0195)  time: 0.1602  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1363 (0.1354)  evaluator_time: 0.0176 (0.0182)  time: 0.1672  data: 0.0121  max mem: 1707
Test: Total time: 0:00:03 (0.1674 s / it)
Averaged stats: model_time: 0.1363 (0.1354)  evaluator_time: 0.0176 (0.0182)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.428
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.862
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.367
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.451
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.419
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.039
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.331
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.526
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.526
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.526
=====================================
Epoch: [15]  [ 0/40]  eta: 0:00:13  lr: 0.000300  loss: 0.7925 (0.7925)  loss_classifier: 0.2605 (0.2605)  loss_box_reg: 0.4942 (0.4942)  loss_objectness: 0.0082 (0.0082)  loss_rpn_box_reg: 0.0296 (0.0296)  time: 0.3322  data: 0.0200  max mem: 1707
Epoch: [15]  [39/40]  eta: 0:00:00  lr: 0.000300  loss: 0.7836 (0.8105)  loss_classifier: 0.2162 (0.2373)  loss_box_reg: 0.5144 (0.5123)  loss_objectness: 0.0165 (0.0187)  loss_rpn_box_reg: 0.0453 (0.0422)  time: 0.3368  data: 0.0146  max mem: 1707
Epoch: [15] Total time: 0:00:13 (0.3314 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1377 (0.1377)  evaluator_time: 0.0176 (0.0176)  time: 0.1690  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1377 (0.1377)  evaluator_time: 0.0215 (0.0227)  time: 0.1739  data: 0.0120  max mem: 1707
Test: Total time: 0:00:03 (0.1740 s / it)
Averaged stats: model_time: 0.1377 (0.1377)  evaluator_time: 0.0215 (0.0227)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.429
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.937
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.250
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.441
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.420
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.036
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.336
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.512
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.525
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.483
=====================================
Epoch: [16]  [ 0/40]  eta: 0:00:13  lr: 0.000297  loss: 0.7293 (0.7293)  loss_classifier: 0.2047 (0.2047)  loss_box_reg: 0.4610 (0.4610)  loss_objectness: 0.0311 (0.0311)  loss_rpn_box_reg: 0.0325 (0.0325)  time: 0.3330  data: 0.0127  max mem: 1707
Epoch: [16]  [39/40]  eta: 0:00:00  lr: 0.000297  loss: 0.7085 (0.7250)  loss_classifier: 0.1970 (0.2084)  loss_box_reg: 0.4497 (0.4588)  loss_objectness: 0.0165 (0.0175)  loss_rpn_box_reg: 0.0390 (0.0402)  time: 0.3350  data: 0.0133  max mem: 1707
Epoch: [16] Total time: 0:00:13 (0.3368 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1382 (0.1382)  evaluator_time: 0.0225 (0.0225)  time: 0.1734  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1377 (0.1375)  evaluator_time: 0.0210 (0.0208)  time: 0.1716  data: 0.0120  max mem: 1707
Test: Total time: 0:00:03 (0.1716 s / it)
Averaged stats: model_time: 0.1377 (0.1375)  evaluator_time: 0.0210 (0.0208)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.481
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.923
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.404
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.495
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.467
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.042
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.363
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.549
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.555
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.537
=====================================
Epoch: [17]  [ 0/40]  eta: 0:00:13  lr: 0.000289  loss: 0.5706 (0.5706)  loss_classifier: 0.1443 (0.1443)  loss_box_reg: 0.3941 (0.3941)  loss_objectness: 0.0050 (0.0050)  loss_rpn_box_reg: 0.0271 (0.0271)  time: 0.3399  data: 0.0195  max mem: 1707
Epoch: [17]  [39/40]  eta: 0:00:00  lr: 0.000289  loss: 0.6393 (0.6536)  loss_classifier: 0.1783 (0.1828)  loss_box_reg: 0.4047 (0.4154)  loss_objectness: 0.0189 (0.0191)  loss_rpn_box_reg: 0.0316 (0.0363)  time: 0.3469  data: 0.0142  max mem: 1707
Epoch: [17] Total time: 0:00:13 (0.3410 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1470 (0.1470)  evaluator_time: 0.0225 (0.0225)  time: 0.1851  data: 0.0146  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1494 (0.1513)  evaluator_time: 0.0215 (0.0207)  time: 0.1869  data: 0.0133  max mem: 1707
Test: Total time: 0:00:03 (0.1870 s / it)
Averaged stats: model_time: 0.1494 (0.1513)  evaluator_time: 0.0215 (0.0207)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.504
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.947
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.430
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.509
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.512
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.042
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.375
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.574
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.583
=====================================
Epoch: [18]  [ 0/40]  eta: 0:00:13  lr: 0.000275  loss: 0.7198 (0.7198)  loss_classifier: 0.1703 (0.1703)  loss_box_reg: 0.4622 (0.4622)  loss_objectness: 0.0339 (0.0339)  loss_rpn_box_reg: 0.0534 (0.0534)  time: 0.3479  data: 0.0225  max mem: 1707
Epoch: [18]  [39/40]  eta: 0:00:00  lr: 0.000275  loss: 0.5635 (0.5874)  loss_classifier: 0.1512 (0.1647)  loss_box_reg: 0.3558 (0.3732)  loss_objectness: 0.0093 (0.0183)  loss_rpn_box_reg: 0.0279 (0.0312)  time: 0.3574  data: 0.0156  max mem: 1707
Epoch: [18] Total time: 0:00:14 (0.3710 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1455 (0.1455)  evaluator_time: 0.0166 (0.0166)  time: 0.1758  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1446 (0.1453)  evaluator_time: 0.0146 (0.0154)  time: 0.1745  data: 0.0122  max mem: 1707
Test: Total time: 0:00:03 (0.1746 s / it)
Averaged stats: model_time: 0.1446 (0.1453)  evaluator_time: 0.0146 (0.0154)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.519
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.966
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.497
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.515
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.041
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.378
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.587
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.581
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.600
=====================================
Epoch: [19]  [ 0/40]  eta: 0:00:14  lr: 0.000256  loss: 0.6306 (0.6306)  loss_classifier: 0.1462 (0.1462)  loss_box_reg: 0.4556 (0.4556)  loss_objectness: 0.0094 (0.0094)  loss_rpn_box_reg: 0.0195 (0.0195)  time: 0.3707  data: 0.0308  max mem: 1707
Epoch: [19]  [39/40]  eta: 0:00:00  lr: 0.000256  loss: 0.5269 (0.5614)  loss_classifier: 0.1369 (0.1500)  loss_box_reg: 0.3520 (0.3681)  loss_objectness: 0.0113 (0.0151)  loss_rpn_box_reg: 0.0280 (0.0282)  time: 0.3543  data: 0.0149  max mem: 1707
Epoch: [19] Total time: 0:00:14 (0.3519 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1480 (0.1480)  evaluator_time: 0.0156 (0.0156)  time: 0.1773  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1445 (0.1450)  evaluator_time: 0.0146 (0.0151)  time: 0.1741  data: 0.0125  max mem: 1707
Test: Total time: 0:00:03 (0.1743 s / it)
Averaged stats: model_time: 0.1445 (0.1450)  evaluator_time: 0.0146 (0.0151)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.543
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.958
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.556
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.558
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.518
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.394
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.603
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.623
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.560
=====================================
Epoch: [20]  [ 0/40]  eta: 0:00:14  lr: 0.000233  loss: 0.4844 (0.4844)  loss_classifier: 0.1400 (0.1400)  loss_box_reg: 0.2951 (0.2951)  loss_objectness: 0.0180 (0.0180)  loss_rpn_box_reg: 0.0312 (0.0312)  time: 0.3640  data: 0.0220  max mem: 1707
Epoch: [20]  [39/40]  eta: 0:00:00  lr: 0.000233  loss: 0.4948 (0.5086)  loss_classifier: 0.1434 (0.1442)  loss_box_reg: 0.3199 (0.3265)  loss_objectness: 0.0076 (0.0126)  loss_rpn_box_reg: 0.0211 (0.0253)  time: 0.3508  data: 0.0141  max mem: 1707
Epoch: [20] Total time: 0:00:13 (0.3494 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1455 (0.1455)  evaluator_time: 0.0146 (0.0146)  time: 0.1748  data: 0.0137  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1445 (0.1446)  evaluator_time: 0.0137 (0.0140)  time: 0.1721  data: 0.0121  max mem: 1707
Test: Total time: 0:00:03 (0.1722 s / it)
Averaged stats: model_time: 0.1445 (0.1446)  evaluator_time: 0.0137 (0.0140)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.570
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.958
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.613
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.581
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.561
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.411
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.630
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.644
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.600
=====================================
Epoch: [21]  [ 0/40]  eta: 0:00:14  lr: 0.000207  loss: 0.4242 (0.4242)  loss_classifier: 0.1214 (0.1214)  loss_box_reg: 0.2858 (0.2858)  loss_objectness: 0.0038 (0.0038)  loss_rpn_box_reg: 0.0132 (0.0132)  time: 0.3584  data: 0.0195  max mem: 1707
Epoch: [21]  [39/40]  eta: 0:00:00  lr: 0.000207  loss: 0.4963 (0.4952)  loss_classifier: 0.1293 (0.1388)  loss_box_reg: 0.3143 (0.3214)  loss_objectness: 0.0068 (0.0114)  loss_rpn_box_reg: 0.0209 (0.0236)  time: 0.3514  data: 0.0136  max mem: 1707
Epoch: [21] Total time: 0:00:14 (0.3514 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1460 (0.1460)  evaluator_time: 0.0137 (0.0137)  time: 0.1734  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1445 (0.1443)  evaluator_time: 0.0117 (0.0124)  time: 0.1702  data: 0.0121  max mem: 1707
Test: Total time: 0:00:03 (0.1703 s / it)
Averaged stats: model_time: 0.1445 (0.1443)  evaluator_time: 0.0117 (0.0124)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.547
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.959
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.590
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.552
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.043
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.399
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.605
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.611
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.592
=====================================
Epoch: [22]  [ 0/40]  eta: 0:00:14  lr: 0.000179  loss: 0.4769 (0.4769)  loss_classifier: 0.1419 (0.1419)  loss_box_reg: 0.3000 (0.3000)  loss_objectness: 0.0173 (0.0173)  loss_rpn_box_reg: 0.0177 (0.0177)  time: 0.3560  data: 0.0176  max mem: 1707
Epoch: [22]  [39/40]  eta: 0:00:00  lr: 0.000179  loss: 0.4691 (0.4855)  loss_classifier: 0.1282 (0.1348)  loss_box_reg: 0.2925 (0.3134)  loss_objectness: 0.0124 (0.0128)  loss_rpn_box_reg: 0.0215 (0.0245)  time: 0.3507  data: 0.0140  max mem: 1707
Epoch: [22] Total time: 0:00:14 (0.3516 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1441 (0.1441)  evaluator_time: 0.0176 (0.0176)  time: 0.1753  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1441 (0.1442)  evaluator_time: 0.0127 (0.0138)  time: 0.1718  data: 0.0122  max mem: 1707
Test: Total time: 0:00:03 (0.1719 s / it)
Averaged stats: model_time: 0.1441 (0.1442)  evaluator_time: 0.0127 (0.0138)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.539
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.948
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.588
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.539
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.556
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.043
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.390
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.600
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.595
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.609
=====================================
Epoch: [23]  [ 0/40]  eta: 0:00:14  lr: 0.000150  loss: 0.5473 (0.5473)  loss_classifier: 0.1405 (0.1405)  loss_box_reg: 0.3622 (0.3622)  loss_objectness: 0.0132 (0.0132)  loss_rpn_box_reg: 0.0314 (0.0314)  time: 0.3506  data: 0.0137  max mem: 1707
Epoch: [23]  [39/40]  eta: 0:00:00  lr: 0.000150  loss: 0.4385 (0.4705)  loss_classifier: 0.1212 (0.1322)  loss_box_reg: 0.2825 (0.2997)  loss_objectness: 0.0085 (0.0129)  loss_rpn_box_reg: 0.0240 (0.0257)  time: 0.3517  data: 0.0137  max mem: 1707
Epoch: [23] Total time: 0:00:14 (0.3512 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1431 (0.1431)  evaluator_time: 0.0137 (0.0137)  time: 0.1704  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1436 (0.1442)  evaluator_time: 0.0132 (0.0136)  time: 0.1716  data: 0.0123  max mem: 1707
Test: Total time: 0:00:03 (0.1717 s / it)
Averaged stats: model_time: 0.1436 (0.1442)  evaluator_time: 0.0132 (0.0136)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.587
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.969
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.726
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.603
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.562
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.046
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.418
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.633
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.651
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.594
=====================================
Epoch: [24]  [ 0/40]  eta: 0:00:14  lr: 0.000121  loss: 0.3927 (0.3927)  loss_classifier: 0.1053 (0.1053)  loss_box_reg: 0.2573 (0.2573)  loss_objectness: 0.0096 (0.0096)  loss_rpn_box_reg: 0.0205 (0.0205)  time: 0.3511  data: 0.0137  max mem: 1707
Epoch: [24]  [39/40]  eta: 0:00:00  lr: 0.000121  loss: 0.4403 (0.4355)  loss_classifier: 0.1174 (0.1263)  loss_box_reg: 0.2756 (0.2780)  loss_objectness: 0.0075 (0.0109)  loss_rpn_box_reg: 0.0176 (0.0203)  time: 0.3519  data: 0.0137  max mem: 1707
Epoch: [24] Total time: 0:00:14 (0.3523 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1465 (0.1465)  evaluator_time: 0.0146 (0.0146)  time: 0.1739  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1446 (0.1446)  evaluator_time: 0.0117 (0.0123)  time: 0.1705  data: 0.0122  max mem: 1707
Test: Total time: 0:00:03 (0.1706 s / it)
Averaged stats: model_time: 0.1446 (0.1446)  evaluator_time: 0.0117 (0.0123)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.606
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.957
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.732
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.613
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.600
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.046
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.435
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.660
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.668
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.643
=====================================
Epoch: [25]  [ 0/40]  eta: 0:00:14  lr: 0.000093  loss: 0.4009 (0.4009)  loss_classifier: 0.1242 (0.1242)  loss_box_reg: 0.2479 (0.2479)  loss_objectness: 0.0082 (0.0082)  loss_rpn_box_reg: 0.0207 (0.0207)  time: 0.3512  data: 0.0161  max mem: 1707
Epoch: [25]  [39/40]  eta: 0:00:00  lr: 0.000093  loss: 0.4129 (0.4248)  loss_classifier: 0.1198 (0.1255)  loss_box_reg: 0.2619 (0.2691)  loss_objectness: 0.0079 (0.0103)  loss_rpn_box_reg: 0.0173 (0.0199)  time: 0.3522  data: 0.0141  max mem: 1707
Epoch: [25] Total time: 0:00:14 (0.3507 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1445 (0.1445)  evaluator_time: 0.0137 (0.0137)  time: 0.1729  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1436 (0.1437)  evaluator_time: 0.0107 (0.0113)  time: 0.1685  data: 0.0120  max mem: 1707
Test: Total time: 0:00:03 (0.1685 s / it)
Averaged stats: model_time: 0.1436 (0.1437)  evaluator_time: 0.0107 (0.0113)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.601
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.965
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.716
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.610
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.600
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.046
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.430
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.653
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.656
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.646
=====================================
Epoch: [26]  [ 0/40]  eta: 0:00:13  lr: 0.000067  loss: 0.5633 (0.5633)  loss_classifier: 0.1865 (0.1865)  loss_box_reg: 0.3561 (0.3561)  loss_objectness: 0.0036 (0.0036)  loss_rpn_box_reg: 0.0171 (0.0171)  time: 0.3482  data: 0.0215  max mem: 1707
Epoch: [26]  [39/40]  eta: 0:00:00  lr: 0.000067  loss: 0.3932 (0.4135)  loss_classifier: 0.1160 (0.1227)  loss_box_reg: 0.2593 (0.2643)  loss_objectness: 0.0075 (0.0086)  loss_rpn_box_reg: 0.0153 (0.0180)  time: 0.3483  data: 0.0137  max mem: 1707
Epoch: [26] Total time: 0:00:13 (0.3488 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1407 (0.1407)  evaluator_time: 0.0127 (0.0127)  time: 0.1680  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1416 (0.1408)  evaluator_time: 0.0117 (0.0113)  time: 0.1656  data: 0.0119  max mem: 1707
Test: Total time: 0:00:03 (0.1656 s / it)
Averaged stats: model_time: 0.1416 (0.1408)  evaluator_time: 0.0117 (0.0113)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.607
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.949
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.729
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.615
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.049
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.434
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.656
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.664
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.639
=====================================
Epoch: [27]  [ 0/40]  eta: 0:00:14  lr: 0.000044  loss: 0.4081 (0.4081)  loss_classifier: 0.1254 (0.1254)  loss_box_reg: 0.2624 (0.2624)  loss_objectness: 0.0053 (0.0053)  loss_rpn_box_reg: 0.0149 (0.0149)  time: 0.3516  data: 0.0156  max mem: 1707
Epoch: [27]  [39/40]  eta: 0:00:00  lr: 0.000044  loss: 0.3879 (0.3924)  loss_classifier: 0.1170 (0.1208)  loss_box_reg: 0.2468 (0.2480)  loss_objectness: 0.0054 (0.0070)  loss_rpn_box_reg: 0.0156 (0.0166)  time: 0.3492  data: 0.0135  max mem: 1707
Epoch: [27] Total time: 0:00:13 (0.3465 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1289 (0.1289)  evaluator_time: 0.0137 (0.0137)  time: 0.1563  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1392 (0.1403)  evaluator_time: 0.0117 (0.0114)  time: 0.1655  data: 0.0122  max mem: 1707
Test: Total time: 0:00:03 (0.1656 s / it)
Averaged stats: model_time: 0.1392 (0.1403)  evaluator_time: 0.0117 (0.0114)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.594
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.949
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.710
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.600
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.602
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.428
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.645
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.644
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647
=====================================
Epoch: [28]  [ 0/40]  eta: 0:00:13  lr: 0.000025  loss: 0.4178 (0.4178)  loss_classifier: 0.1110 (0.1110)  loss_box_reg: 0.2836 (0.2836)  loss_objectness: 0.0037 (0.0037)  loss_rpn_box_reg: 0.0196 (0.0196)  time: 0.3448  data: 0.0156  max mem: 1707
Epoch: [28]  [39/40]  eta: 0:00:00  lr: 0.000025  loss: 0.3771 (0.3953)  loss_classifier: 0.1206 (0.1219)  loss_box_reg: 0.2349 (0.2483)  loss_objectness: 0.0050 (0.0081)  loss_rpn_box_reg: 0.0161 (0.0171)  time: 0.3529  data: 0.0146  max mem: 1707
Epoch: [28] Total time: 0:00:13 (0.3481 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1455 (0.1455)  evaluator_time: 0.0127 (0.0127)  time: 0.1714  data: 0.0112  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1445 (0.1443)  evaluator_time: 0.0107 (0.0108)  time: 0.1686  data: 0.0120  max mem: 1707
Test: Total time: 0:00:03 (0.1687 s / it)
Averaged stats: model_time: 0.1445 (0.1443)  evaluator_time: 0.0107 (0.0108)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.610
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.957
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.721
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.620
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.607
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.049
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.436
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.662
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.665
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.657
=====================================
Epoch: [29]  [ 0/40]  eta: 0:00:14  lr: 0.000011  loss: 0.3657 (0.3657)  loss_classifier: 0.1130 (0.1130)  loss_box_reg: 0.2314 (0.2314)  loss_objectness: 0.0044 (0.0044)  loss_rpn_box_reg: 0.0170 (0.0170)  time: 0.3560  data: 0.0176  max mem: 1707
Epoch: [29]  [39/40]  eta: 0:00:00  lr: 0.000011  loss: 0.3899 (0.3834)  loss_classifier: 0.1198 (0.1219)  loss_box_reg: 0.2421 (0.2360)  loss_objectness: 0.0091 (0.0099)  loss_rpn_box_reg: 0.0149 (0.0156)  time: 0.3519  data: 0.0144  max mem: 1707
Epoch: [29] Total time: 0:00:14 (0.3520 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1436 (0.1436)  evaluator_time: 0.0137 (0.0137)  time: 0.1709  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1436 (0.1436)  evaluator_time: 0.0107 (0.0110)  time: 0.1680  data: 0.0118  max mem: 1707
Test: Total time: 0:00:03 (0.1681 s / it)
Averaged stats: model_time: 0.1436 (0.1436)  evaluator_time: 0.0107 (0.0110)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.610
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.955
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.740
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.621
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.600
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.049
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.436
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.660
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.667
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.646
=====================================
Epoch: [30]  [ 0/40]  eta: 0:00:14  lr: 0.000003  loss: 0.3550 (0.3550)  loss_classifier: 0.1016 (0.1016)  loss_box_reg: 0.2264 (0.2264)  loss_objectness: 0.0033 (0.0033)  loss_rpn_box_reg: 0.0237 (0.0237)  time: 0.3536  data: 0.0156  max mem: 1707
Epoch: [30]  [39/40]  eta: 0:00:00  lr: 0.000003  loss: 0.3600 (0.3756)  loss_classifier: 0.1178 (0.1193)  loss_box_reg: 0.2264 (0.2327)  loss_objectness: 0.0032 (0.0083)  loss_rpn_box_reg: 0.0152 (0.0153)  time: 0.3532  data: 0.0145  max mem: 1707
Epoch: [30] Total time: 0:00:14 (0.3508 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1450 (0.1450)  evaluator_time: 0.0127 (0.0127)  time: 0.1734  data: 0.0137  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1421 (0.1408)  evaluator_time: 0.0107 (0.0106)  time: 0.1652  data: 0.0122  max mem: 1707
Test: Total time: 0:00:03 (0.1653 s / it)
Averaged stats: model_time: 0.1421 (0.1408)  evaluator_time: 0.0107 (0.0106)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.611
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.956
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.729
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.621
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.603
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.435
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.664
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.669
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.653
=====================================
Epoch: [31]  [ 0/40]  eta: 0:00:14  lr: 0.000300  loss: 0.3814 (0.3814)  loss_classifier: 0.1103 (0.1103)  loss_box_reg: 0.2521 (0.2521)  loss_objectness: 0.0038 (0.0038)  loss_rpn_box_reg: 0.0152 (0.0152)  time: 0.3589  data: 0.0186  max mem: 1707
Epoch: [31]  [39/40]  eta: 0:00:00  lr: 0.000300  loss: 0.4417 (0.4442)  loss_classifier: 0.1237 (0.1242)  loss_box_reg: 0.2796 (0.2884)  loss_objectness: 0.0053 (0.0087)  loss_rpn_box_reg: 0.0254 (0.0228)  time: 0.3518  data: 0.0137  max mem: 1707
Epoch: [31] Total time: 0:00:14 (0.3521 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1445 (0.1445)  evaluator_time: 0.0127 (0.0127)  time: 0.1709  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1450 (0.1450)  evaluator_time: 0.0107 (0.0115)  time: 0.1698  data: 0.0120  max mem: 1707
Test: Total time: 0:00:03 (0.1699 s / it)
Averaged stats: model_time: 0.1450 (0.1450)  evaluator_time: 0.0107 (0.0115)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.567
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.926
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.653
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.604
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.495
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.418
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.617
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.660
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.527
=====================================
Epoch: [32]  [ 0/40]  eta: 0:00:14  lr: 0.000299  loss: 0.3846 (0.3846)  loss_classifier: 0.1091 (0.1091)  loss_box_reg: 0.2556 (0.2556)  loss_objectness: 0.0030 (0.0030)  loss_rpn_box_reg: 0.0169 (0.0169)  time: 0.3579  data: 0.0166  max mem: 1707
Epoch: [32]  [39/40]  eta: 0:00:00  lr: 0.000299  loss: 0.4253 (0.4401)  loss_classifier: 0.1187 (0.1238)  loss_box_reg: 0.2842 (0.2838)  loss_objectness: 0.0072 (0.0099)  loss_rpn_box_reg: 0.0198 (0.0226)  time: 0.3530  data: 0.0146  max mem: 1707
Epoch: [32] Total time: 0:00:14 (0.3510 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1436 (0.1436)  evaluator_time: 0.0137 (0.0137)  time: 0.1699  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1431 (0.1436)  evaluator_time: 0.0098 (0.0108)  time: 0.1681  data: 0.0121  max mem: 1707
Test: Total time: 0:00:03 (0.1682 s / it)
Averaged stats: model_time: 0.1431 (0.1436)  evaluator_time: 0.0098 (0.0108)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.580
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.949
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.671
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.584
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.595
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.418
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.644
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.644
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.643
=====================================
Epoch: [33]  [ 0/40]  eta: 0:00:14  lr: 0.000297  loss: 0.4114 (0.4114)  loss_classifier: 0.1567 (0.1567)  loss_box_reg: 0.2413 (0.2413)  loss_objectness: 0.0023 (0.0023)  loss_rpn_box_reg: 0.0110 (0.0110)  time: 0.3522  data: 0.0181  max mem: 1707
Epoch: [33]  [39/40]  eta: 0:00:00  lr: 0.000297  loss: 0.4547 (0.4364)  loss_classifier: 0.1226 (0.1233)  loss_box_reg: 0.2772 (0.2801)  loss_objectness: 0.0092 (0.0091)  loss_rpn_box_reg: 0.0239 (0.0240)  time: 0.3497  data: 0.0139  max mem: 1707
Epoch: [33] Total time: 0:00:13 (0.3486 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1436 (0.1436)  evaluator_time: 0.0127 (0.0127)  time: 0.1690  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1436 (0.1438)  evaluator_time: 0.0098 (0.0107)  time: 0.1682  data: 0.0121  max mem: 1707
Test: Total time: 0:00:03 (0.1683 s / it)
Averaged stats: model_time: 0.1436 (0.1438)  evaluator_time: 0.0098 (0.0107)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.565
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.950
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.653
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.565
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.592
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.044
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.408
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.624
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.617
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.639
=====================================
Epoch: [34]  [ 0/40]  eta: 0:00:14  lr: 0.000294  loss: 0.4394 (0.4394)  loss_classifier: 0.1417 (0.1417)  loss_box_reg: 0.2730 (0.2730)  loss_objectness: 0.0042 (0.0042)  loss_rpn_box_reg: 0.0206 (0.0206)  time: 0.3643  data: 0.0205  max mem: 1707
Epoch: [34]  [39/40]  eta: 0:00:00  lr: 0.000294  loss: 0.4449 (0.4441)  loss_classifier: 0.1191 (0.1264)  loss_box_reg: 0.2846 (0.2828)  loss_objectness: 0.0084 (0.0092)  loss_rpn_box_reg: 0.0257 (0.0257)  time: 0.3506  data: 0.0144  max mem: 1707
Epoch: [34] Total time: 0:00:14 (0.3508 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1455 (0.1455)  evaluator_time: 0.0146 (0.0146)  time: 0.1748  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1426 (0.1432)  evaluator_time: 0.0107 (0.0113)  time: 0.1685  data: 0.0121  max mem: 1707
Test: Total time: 0:00:03 (0.1685 s / it)
Averaged stats: model_time: 0.1426 (0.1432)  evaluator_time: 0.0107 (0.0113)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.594
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.970
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.695
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.600
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.602
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.426
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.645
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.647
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.641
=====================================
Epoch: [35]  [ 0/40]  eta: 0:00:14  lr: 0.000289  loss: 0.3855 (0.3855)  loss_classifier: 0.1217 (0.1217)  loss_box_reg: 0.2344 (0.2344)  loss_objectness: 0.0043 (0.0043)  loss_rpn_box_reg: 0.0251 (0.0251)  time: 0.3565  data: 0.0186  max mem: 1707
Epoch: [35]  [39/40]  eta: 0:00:00  lr: 0.000289  loss: 0.3738 (0.4081)  loss_classifier: 0.1076 (0.1205)  loss_box_reg: 0.2448 (0.2560)  loss_objectness: 0.0079 (0.0089)  loss_rpn_box_reg: 0.0187 (0.0227)  time: 0.3507  data: 0.0137  max mem: 1707
Epoch: [35] Total time: 0:00:14 (0.3527 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1465 (0.1465)  evaluator_time: 0.0127 (0.0127)  time: 0.1729  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1445 (0.1444)  evaluator_time: 0.0117 (0.0118)  time: 0.1697  data: 0.0120  max mem: 1707
Test: Total time: 0:00:03 (0.1697 s / it)
Averaged stats: model_time: 0.1445 (0.1444)  evaluator_time: 0.0117 (0.0118)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.586
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.934
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.696
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.603
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.574
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.422
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.636
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.652
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.602
=====================================
Epoch: [36]  [ 0/40]  eta: 0:00:14  lr: 0.000282  loss: 0.4715 (0.4715)  loss_classifier: 0.1294 (0.1294)  loss_box_reg: 0.3193 (0.3193)  loss_objectness: 0.0092 (0.0092)  loss_rpn_box_reg: 0.0136 (0.0136)  time: 0.3614  data: 0.0215  max mem: 1707
Epoch: [36]  [39/40]  eta: 0:00:00  lr: 0.000282  loss: 0.4240 (0.3992)  loss_classifier: 0.1236 (0.1198)  loss_box_reg: 0.2559 (0.2518)  loss_objectness: 0.0071 (0.0084)  loss_rpn_box_reg: 0.0203 (0.0192)  time: 0.3507  data: 0.0148  max mem: 1707
Epoch: [36] Total time: 0:00:14 (0.3523 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1406 (0.1406)  evaluator_time: 0.0127 (0.0127)  time: 0.1670  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1426 (0.1426)  evaluator_time: 0.0107 (0.0111)  time: 0.1674  data: 0.0123  max mem: 1707
Test: Total time: 0:00:03 (0.1675 s / it)
Averaged stats: model_time: 0.1426 (0.1426)  evaluator_time: 0.0107 (0.0111)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.607
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.968
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.751
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.613
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.605
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.431
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.653
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.660
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.638
=====================================
Epoch: [37]  [ 0/40]  eta: 0:00:14  lr: 0.000275  loss: 0.3325 (0.3325)  loss_classifier: 0.0907 (0.0907)  loss_box_reg: 0.1987 (0.1987)  loss_objectness: 0.0245 (0.0245)  loss_rpn_box_reg: 0.0186 (0.0186)  time: 0.3560  data: 0.0205  max mem: 1707
Epoch: [37]  [39/40]  eta: 0:00:00  lr: 0.000275  loss: 0.3808 (0.3937)  loss_classifier: 0.1088 (0.1155)  loss_box_reg: 0.2424 (0.2500)  loss_objectness: 0.0051 (0.0079)  loss_rpn_box_reg: 0.0203 (0.0203)  time: 0.3496  data: 0.0144  max mem: 1707
Epoch: [37] Total time: 0:00:14 (0.3511 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1426 (0.1426)  evaluator_time: 0.0137 (0.0137)  time: 0.1699  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1426 (0.1419)  evaluator_time: 0.0107 (0.0107)  time: 0.1661  data: 0.0121  max mem: 1707
Test: Total time: 0:00:03 (0.1662 s / it)
Averaged stats: model_time: 0.1426 (0.1419)  evaluator_time: 0.0107 (0.0107)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.585
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.958
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.724
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.581
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.619
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.042
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.423
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.646
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.638
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.662
=====================================
Epoch: [38]  [ 0/40]  eta: 0:00:14  lr: 0.000266  loss: 0.4965 (0.4965)  loss_classifier: 0.1344 (0.1344)  loss_box_reg: 0.3112 (0.3112)  loss_objectness: 0.0067 (0.0067)  loss_rpn_box_reg: 0.0442 (0.0442)  time: 0.3541  data: 0.0176  max mem: 1707
Epoch: [38]  [39/40]  eta: 0:00:00  lr: 0.000266  loss: 0.3328 (0.3632)  loss_classifier: 0.1062 (0.1109)  loss_box_reg: 0.2109 (0.2265)  loss_objectness: 0.0064 (0.0073)  loss_rpn_box_reg: 0.0166 (0.0185)  time: 0.3567  data: 0.0146  max mem: 1707
Epoch: [38] Total time: 0:00:14 (0.3503 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1533 (0.1533)  evaluator_time: 0.0146 (0.0146)  time: 0.1816  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1436 (0.1440)  evaluator_time: 0.0107 (0.0110)  time: 0.1689  data: 0.0121  max mem: 1707
Test: Total time: 0:00:03 (0.1689 s / it)
Averaged stats: model_time: 0.1436 (0.1440)  evaluator_time: 0.0107 (0.0110)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.616
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.968
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.745
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.621
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.626
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.438
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.676
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.679
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.669
=====================================
Epoch: [39]  [ 0/40]  eta: 0:00:14  lr: 0.000256  loss: 0.4600 (0.4600)  loss_classifier: 0.1223 (0.1223)  loss_box_reg: 0.2825 (0.2825)  loss_objectness: 0.0286 (0.0286)  loss_rpn_box_reg: 0.0266 (0.0266)  time: 0.3541  data: 0.0142  max mem: 1707
Epoch: [39]  [39/40]  eta: 0:00:00  lr: 0.000256  loss: 0.3396 (0.3514)  loss_classifier: 0.1087 (0.1086)  loss_box_reg: 0.2162 (0.2213)  loss_objectness: 0.0050 (0.0059)  loss_rpn_box_reg: 0.0141 (0.0157)  time: 0.3436  data: 0.0140  max mem: 1707
Epoch: [39] Total time: 0:00:13 (0.3427 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1445 (0.1445)  evaluator_time: 0.0137 (0.0137)  time: 0.1719  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1445 (0.1443)  evaluator_time: 0.0107 (0.0111)  time: 0.1687  data: 0.0122  max mem: 1707
Test: Total time: 0:00:03 (0.1688 s / it)
Averaged stats: model_time: 0.1445 (0.1443)  evaluator_time: 0.0107 (0.0111)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.613
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.939
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.760
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.623
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.050
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.444
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.660
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.670
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.639
=====================================
Epoch: [40]  [ 0/40]  eta: 0:00:14  lr: 0.000245  loss: 0.3260 (0.3260)  loss_classifier: 0.1229 (0.1229)  loss_box_reg: 0.1849 (0.1849)  loss_objectness: 0.0075 (0.0075)  loss_rpn_box_reg: 0.0108 (0.0108)  time: 0.3565  data: 0.0205  max mem: 1707
Epoch: [40]  [39/40]  eta: 0:00:00  lr: 0.000245  loss: 0.3676 (0.3651)  loss_classifier: 0.1068 (0.1065)  loss_box_reg: 0.2399 (0.2320)  loss_objectness: 0.0051 (0.0070)  loss_rpn_box_reg: 0.0173 (0.0197)  time: 0.3503  data: 0.0137  max mem: 1707
Epoch: [40] Total time: 0:00:14 (0.3506 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1455 (0.1455)  evaluator_time: 0.0127 (0.0127)  time: 0.1729  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1442 (0.1439)  evaluator_time: 0.0112 (0.0112)  time: 0.1689  data: 0.0124  max mem: 1707
Test: Total time: 0:00:03 (0.1689 s / it)
Averaged stats: model_time: 0.1442 (0.1439)  evaluator_time: 0.0112 (0.0112)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.614
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.947
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.765
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.624
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.441
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.662
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.674
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.637
=====================================
Epoch: [41]  [ 0/40]  eta: 0:00:13  lr: 0.000233  loss: 0.2929 (0.2929)  loss_classifier: 0.0936 (0.0936)  loss_box_reg: 0.1802 (0.1802)  loss_objectness: 0.0064 (0.0064)  loss_rpn_box_reg: 0.0128 (0.0128)  time: 0.3483  data: 0.0127  max mem: 1707
Epoch: [41]  [39/40]  eta: 0:00:00  lr: 0.000233  loss: 0.3308 (0.3339)  loss_classifier: 0.0936 (0.1026)  loss_box_reg: 0.2168 (0.2097)  loss_objectness: 0.0045 (0.0064)  loss_rpn_box_reg: 0.0148 (0.0152)  time: 0.3501  data: 0.0139  max mem: 1707
Epoch: [41] Total time: 0:00:14 (0.3510 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1445 (0.1445)  evaluator_time: 0.0107 (0.0107)  time: 0.1699  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1431 (0.1428)  evaluator_time: 0.0098 (0.0099)  time: 0.1667  data: 0.0123  max mem: 1707
Test: Total time: 0:00:03 (0.1668 s / it)
Averaged stats: model_time: 0.1431 (0.1428)  evaluator_time: 0.0098 (0.0099)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.614
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.751
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.630
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.594
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.442
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.662
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.680
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.623
=====================================
Epoch: [42]  [ 0/40]  eta: 0:00:14  lr: 0.000221  loss: 0.3808 (0.3808)  loss_classifier: 0.1269 (0.1269)  loss_box_reg: 0.2380 (0.2380)  loss_objectness: 0.0039 (0.0039)  loss_rpn_box_reg: 0.0120 (0.0120)  time: 0.3502  data: 0.0166  max mem: 1707
Epoch: [42]  [39/40]  eta: 0:00:00  lr: 0.000221  loss: 0.3456 (0.3389)  loss_classifier: 0.1004 (0.0995)  loss_box_reg: 0.2268 (0.2193)  loss_objectness: 0.0031 (0.0046)  loss_rpn_box_reg: 0.0155 (0.0154)  time: 0.3471  data: 0.0142  max mem: 1707
Epoch: [42] Total time: 0:00:13 (0.3490 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1426 (0.1426)  evaluator_time: 0.0127 (0.0127)  time: 0.1690  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1426 (0.1431)  evaluator_time: 0.0088 (0.0095)  time: 0.1664  data: 0.0124  max mem: 1707
Test: Total time: 0:00:03 (0.1664 s / it)
Averaged stats: model_time: 0.1426 (0.1431)  evaluator_time: 0.0088 (0.0095)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.551
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.950
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.590
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.551
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.558
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.042
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.619
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.616
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.627
=====================================
Epoch: [43]  [ 0/40]  eta: 0:00:14  lr: 0.000207  loss: 0.4235 (0.4235)  loss_classifier: 0.1317 (0.1317)  loss_box_reg: 0.2577 (0.2577)  loss_objectness: 0.0041 (0.0041)  loss_rpn_box_reg: 0.0299 (0.0299)  time: 0.3584  data: 0.0146  max mem: 1707
Epoch: [43]  [39/40]  eta: 0:00:00  lr: 0.000207  loss: 0.3004 (0.3316)  loss_classifier: 0.0936 (0.1001)  loss_box_reg: 0.1874 (0.2080)  loss_objectness: 0.0040 (0.0057)  loss_rpn_box_reg: 0.0173 (0.0179)  time: 0.3511  data: 0.0141  max mem: 1707
Epoch: [43] Total time: 0:00:14 (0.3500 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1416 (0.1416)  evaluator_time: 0.0107 (0.0107)  time: 0.1660  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1436 (0.1438)  evaluator_time: 0.0088 (0.0093)  time: 0.1662  data: 0.0117  max mem: 1707
Test: Total time: 0:00:03 (0.1663 s / it)
Averaged stats: model_time: 0.1436 (0.1438)  evaluator_time: 0.0088 (0.0093)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.603
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.766
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.614
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.432
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.668
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.640
=====================================
Epoch: [44]  [ 0/40]  eta: 0:00:14  lr: 0.000194  loss: 0.3657 (0.3657)  loss_classifier: 0.1070 (0.1070)  loss_box_reg: 0.2265 (0.2265)  loss_objectness: 0.0031 (0.0031)  loss_rpn_box_reg: 0.0291 (0.0291)  time: 0.3609  data: 0.0225  max mem: 1707
Epoch: [44]  [39/40]  eta: 0:00:00  lr: 0.000194  loss: 0.3092 (0.3248)  loss_classifier: 0.0978 (0.0998)  loss_box_reg: 0.2105 (0.2037)  loss_objectness: 0.0034 (0.0050)  loss_rpn_box_reg: 0.0144 (0.0163)  time: 0.3517  data: 0.0136  max mem: 1707
Epoch: [44] Total time: 0:00:14 (0.3518 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1445 (0.1445)  evaluator_time: 0.0098 (0.0098)  time: 0.1680  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1445 (0.1448)  evaluator_time: 0.0098 (0.0099)  time: 0.1683  data: 0.0119  max mem: 1707
Test: Total time: 0:00:03 (0.1685 s / it)
Averaged stats: model_time: 0.1445 (0.1448)  evaluator_time: 0.0098 (0.0099)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.595
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.747
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.604
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.592
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.427
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.647
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.655
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.629
=====================================
Epoch: [45]  [ 0/40]  eta: 0:00:14  lr: 0.000179  loss: 0.3106 (0.3106)  loss_classifier: 0.0998 (0.0998)  loss_box_reg: 0.1958 (0.1958)  loss_objectness: 0.0032 (0.0032)  loss_rpn_box_reg: 0.0118 (0.0118)  time: 0.3521  data: 0.0137  max mem: 1707
Epoch: [45]  [39/40]  eta: 0:00:00  lr: 0.000179  loss: 0.2973 (0.3128)  loss_classifier: 0.0924 (0.0964)  loss_box_reg: 0.1879 (0.1975)  loss_objectness: 0.0023 (0.0043)  loss_rpn_box_reg: 0.0132 (0.0145)  time: 0.3518  data: 0.0140  max mem: 1707
Epoch: [45] Total time: 0:00:14 (0.3512 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1426 (0.1426)  evaluator_time: 0.0117 (0.0117)  time: 0.1670  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1436 (0.1436)  evaluator_time: 0.0098 (0.0095)  time: 0.1669  data: 0.0120  max mem: 1707
Test: Total time: 0:00:03 (0.1670 s / it)
Averaged stats: model_time: 0.1436 (0.1436)  evaluator_time: 0.0098 (0.0095)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.623
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.959
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.767
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.635
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.619
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.046
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.443
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.677
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.692
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.644
=====================================
Epoch: [46]  [ 0/40]  eta: 0:00:14  lr: 0.000165  loss: 0.2516 (0.2516)  loss_classifier: 0.0786 (0.0786)  loss_box_reg: 0.1592 (0.1592)  loss_objectness: 0.0030 (0.0030)  loss_rpn_box_reg: 0.0108 (0.0108)  time: 0.3600  data: 0.0205  max mem: 1707
Epoch: [46]  [39/40]  eta: 0:00:00  lr: 0.000165  loss: 0.3050 (0.3030)  loss_classifier: 0.0867 (0.0963)  loss_box_reg: 0.1929 (0.1882)  loss_objectness: 0.0039 (0.0048)  loss_rpn_box_reg: 0.0134 (0.0136)  time: 0.3523  data: 0.0138  max mem: 1707
Epoch: [46] Total time: 0:00:14 (0.3526 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1436 (0.1436)  evaluator_time: 0.0107 (0.0107)  time: 0.1690  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1431 (0.1434)  evaluator_time: 0.0088 (0.0093)  time: 0.1663  data: 0.0120  max mem: 1707
Test: Total time: 0:00:03 (0.1663 s / it)
Averaged stats: model_time: 0.1431 (0.1434)  evaluator_time: 0.0088 (0.0093)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.589
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.939
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.730
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.599
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.578
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.420
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.643
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.650
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.629
=====================================
Epoch: [47]  [ 0/40]  eta: 0:00:14  lr: 0.000150  loss: 0.2649 (0.2649)  loss_classifier: 0.0777 (0.0777)  loss_box_reg: 0.1662 (0.1662)  loss_objectness: 0.0016 (0.0016)  loss_rpn_box_reg: 0.0193 (0.0193)  time: 0.3545  data: 0.0234  max mem: 1707
Epoch: [47]  [39/40]  eta: 0:00:00  lr: 0.000150  loss: 0.2939 (0.3049)  loss_classifier: 0.0927 (0.0951)  loss_box_reg: 0.1856 (0.1920)  loss_objectness: 0.0032 (0.0038)  loss_rpn_box_reg: 0.0115 (0.0140)  time: 0.3528  data: 0.0142  max mem: 1707
Epoch: [47] Total time: 0:00:14 (0.3513 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1475 (0.1475)  evaluator_time: 0.0107 (0.0107)  time: 0.1729  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1436 (0.1442)  evaluator_time: 0.0088 (0.0092)  time: 0.1673  data: 0.0122  max mem: 1707
Test: Total time: 0:00:03 (0.1673 s / it)
Averaged stats: model_time: 0.1436 (0.1442)  evaluator_time: 0.0088 (0.0092)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.605
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.747
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.619
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.586
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.438
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.674
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.627
=====================================
Epoch: [48]  [ 0/40]  eta: 0:00:14  lr: 0.000135  loss: 0.3816 (0.3816)  loss_classifier: 0.1519 (0.1519)  loss_box_reg: 0.2121 (0.2121)  loss_objectness: 0.0046 (0.0046)  loss_rpn_box_reg: 0.0130 (0.0130)  time: 0.3512  data: 0.0146  max mem: 1707
Epoch: [48]  [39/40]  eta: 0:00:00  lr: 0.000135  loss: 0.2778 (0.2897)  loss_classifier: 0.0854 (0.0949)  loss_box_reg: 0.1814 (0.1781)  loss_objectness: 0.0026 (0.0052)  loss_rpn_box_reg: 0.0118 (0.0115)  time: 0.3496  data: 0.0141  max mem: 1707
Epoch: [48] Total time: 0:00:13 (0.3486 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1460 (0.1460)  evaluator_time: 0.0098 (0.0098)  time: 0.1695  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1441 (0.1439)  evaluator_time: 0.0098 (0.0095)  time: 0.1665  data: 0.0118  max mem: 1707
Test: Total time: 0:00:03 (0.1666 s / it)
Averaged stats: model_time: 0.1441 (0.1439)  evaluator_time: 0.0098 (0.0095)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.604
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.930
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.750
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.617
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.583
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.443
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.649
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.663
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.619
=====================================
Epoch: [49]  [ 0/40]  eta: 0:00:14  lr: 0.000121  loss: 0.2171 (0.2171)  loss_classifier: 0.0763 (0.0763)  loss_box_reg: 0.1265 (0.1265)  loss_objectness: 0.0059 (0.0059)  loss_rpn_box_reg: 0.0084 (0.0084)  time: 0.3545  data: 0.0205  max mem: 1707
Epoch: [49]  [39/40]  eta: 0:00:00  lr: 0.000121  loss: 0.2792 (0.2921)  loss_classifier: 0.0845 (0.0949)  loss_box_reg: 0.1677 (0.1780)  loss_objectness: 0.0036 (0.0063)  loss_rpn_box_reg: 0.0126 (0.0129)  time: 0.3568  data: 0.0141  max mem: 1707
Epoch: [49] Total time: 0:00:14 (0.3621 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1426 (0.1426)  evaluator_time: 0.0117 (0.0117)  time: 0.1690  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1431 (0.1465)  evaluator_time: 0.0088 (0.0094)  time: 0.1694  data: 0.0122  max mem: 1707
Test: Total time: 0:00:03 (0.1695 s / it)
Averaged stats: model_time: 0.1431 (0.1465)  evaluator_time: 0.0088 (0.0094)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.609
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.931
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.759
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.626
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.586
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.440
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.658
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.674
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.623
=====================================
Epoch: [50]  [ 0/40]  eta: 0:00:13  lr: 0.000106  loss: 0.3236 (0.3236)  loss_classifier: 0.1101 (0.1101)  loss_box_reg: 0.1988 (0.1988)  loss_objectness: 0.0033 (0.0033)  loss_rpn_box_reg: 0.0114 (0.0114)  time: 0.3355  data: 0.0137  max mem: 1707
Epoch: [50]  [39/40]  eta: 0:00:00  lr: 0.000106  loss: 0.2579 (0.2695)  loss_classifier: 0.0853 (0.0893)  loss_box_reg: 0.1517 (0.1641)  loss_objectness: 0.0026 (0.0041)  loss_rpn_box_reg: 0.0111 (0.0120)  time: 0.3347  data: 0.0134  max mem: 1707
Epoch: [50] Total time: 0:00:13 (0.3337 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1367 (0.1367)  evaluator_time: 0.0117 (0.0117)  time: 0.1611  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1367 (0.1361)  evaluator_time: 0.0098 (0.0094)  time: 0.1584  data: 0.0117  max mem: 1707
Test: Total time: 0:00:03 (0.1585 s / it)
Averaged stats: model_time: 0.1367 (0.1361)  evaluator_time: 0.0098 (0.0094)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.614
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.948
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.785
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.623
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.611
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.437
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.665
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.671
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.651
=====================================
Epoch: [51]  [ 0/40]  eta: 0:00:13  lr: 0.000093  loss: 0.3097 (0.3097)  loss_classifier: 0.1011 (0.1011)  loss_box_reg: 0.1860 (0.1860)  loss_objectness: 0.0147 (0.0147)  loss_rpn_box_reg: 0.0079 (0.0079)  time: 0.3292  data: 0.0137  max mem: 1707
Epoch: [51]  [39/40]  eta: 0:00:00  lr: 0.000093  loss: 0.2487 (0.2661)  loss_classifier: 0.0787 (0.0905)  loss_box_reg: 0.1487 (0.1624)  loss_objectness: 0.0023 (0.0031)  loss_rpn_box_reg: 0.0095 (0.0102)  time: 0.3338  data: 0.0138  max mem: 1707
Epoch: [51] Total time: 0:00:13 (0.3338 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1353 (0.1353)  evaluator_time: 0.0112 (0.0112)  time: 0.1602  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1373 (0.1377)  evaluator_time: 0.0093 (0.0093)  time: 0.1603  data: 0.0118  max mem: 1707
Test: Total time: 0:00:03 (0.1604 s / it)
Averaged stats: model_time: 0.1373 (0.1377)  evaluator_time: 0.0093 (0.0093)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.611
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.949
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.746
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.625
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.593
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.438
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.660
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.675
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.628
=====================================
Epoch: [52]  [ 0/40]  eta: 0:00:32  lr: 0.000079  loss: 0.2800 (0.2800)  loss_classifier: 0.1388 (0.1388)  loss_box_reg: 0.1257 (0.1257)  loss_objectness: 0.0073 (0.0073)  loss_rpn_box_reg: 0.0082 (0.0082)  time: 0.8229  data: 0.5018  max mem: 1707
Epoch: [52]  [39/40]  eta: 0:00:00  lr: 0.000079  loss: 0.2342 (0.2551)  loss_classifier: 0.0770 (0.0844)  loss_box_reg: 0.1413 (0.1568)  loss_objectness: 0.0024 (0.0033)  loss_rpn_box_reg: 0.0103 (0.0105)  time: 0.3331  data: 0.0131  max mem: 1707
Epoch: [52] Total time: 0:00:13 (0.3453 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1357 (0.1357)  evaluator_time: 0.0117 (0.0117)  time: 0.1611  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1358 (0.1367)  evaluator_time: 0.0088 (0.0091)  time: 0.1593  data: 0.0119  max mem: 1707
Test: Total time: 0:00:03 (0.1594 s / it)
Averaged stats: model_time: 0.1358 (0.1367)  evaluator_time: 0.0088 (0.0091)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.617
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.766
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.630
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.615
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.439
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.672
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.683
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.648
=====================================
Epoch: [53]  [ 0/40]  eta: 0:00:13  lr: 0.000067  loss: 0.1928 (0.1928)  loss_classifier: 0.0515 (0.0515)  loss_box_reg: 0.1316 (0.1316)  loss_objectness: 0.0019 (0.0019)  loss_rpn_box_reg: 0.0078 (0.0078)  time: 0.3492  data: 0.0215  max mem: 1707
Epoch: [53]  [39/40]  eta: 0:00:00  lr: 0.000067  loss: 0.2313 (0.2536)  loss_classifier: 0.0779 (0.0870)  loss_box_reg: 0.1415 (0.1530)  loss_objectness: 0.0034 (0.0037)  loss_rpn_box_reg: 0.0095 (0.0099)  time: 0.3329  data: 0.0132  max mem: 1707
Epoch: [53] Total time: 0:00:13 (0.3337 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1367 (0.1367)  evaluator_time: 0.0107 (0.0107)  time: 0.1602  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1368 (0.1370)  evaluator_time: 0.0088 (0.0089)  time: 0.1591  data: 0.0118  max mem: 1707
Test: Total time: 0:00:03 (0.1593 s / it)
Averaged stats: model_time: 0.1368 (0.1370)  evaluator_time: 0.0088 (0.0089)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.596
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.930
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.749
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.611
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.588
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.046
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.432
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.650
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.663
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.622
=====================================
Epoch: [54]  [ 0/40]  eta: 0:00:13  lr: 0.000055  loss: 0.2331 (0.2331)  loss_classifier: 0.0762 (0.0762)  loss_box_reg: 0.1433 (0.1433)  loss_objectness: 0.0028 (0.0028)  loss_rpn_box_reg: 0.0108 (0.0108)  time: 0.3424  data: 0.0166  max mem: 1707
Epoch: [54]  [39/40]  eta: 0:00:00  lr: 0.000055  loss: 0.2645 (0.2577)  loss_classifier: 0.0897 (0.0886)  loss_box_reg: 0.1579 (0.1536)  loss_objectness: 0.0033 (0.0051)  loss_rpn_box_reg: 0.0099 (0.0104)  time: 0.3330  data: 0.0138  max mem: 1707
Epoch: [54] Total time: 0:00:13 (0.3337 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1368 (0.1368)  evaluator_time: 0.0098 (0.0098)  time: 0.1602  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1358 (0.1363)  evaluator_time: 0.0088 (0.0090)  time: 0.1585  data: 0.0117  max mem: 1707
Test: Total time: 0:00:03 (0.1586 s / it)
Averaged stats: model_time: 0.1358 (0.1363)  evaluator_time: 0.0088 (0.0090)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.611
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.949
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.747
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.624
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.604
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.439
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.663
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.675
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.638
=====================================
Epoch: [55]  [ 0/40]  eta: 0:00:13  lr: 0.000044  loss: 0.2156 (0.2156)  loss_classifier: 0.0974 (0.0974)  loss_box_reg: 0.1088 (0.1088)  loss_objectness: 0.0015 (0.0015)  loss_rpn_box_reg: 0.0080 (0.0080)  time: 0.3418  data: 0.0205  max mem: 1707
Epoch: [55]  [39/40]  eta: 0:00:00  lr: 0.000044  loss: 0.2527 (0.2504)  loss_classifier: 0.0903 (0.0898)  loss_box_reg: 0.1519 (0.1480)  loss_objectness: 0.0019 (0.0030)  loss_rpn_box_reg: 0.0101 (0.0095)  time: 0.3360  data: 0.0134  max mem: 1707
Epoch: [55] Total time: 0:00:13 (0.3348 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1397 (0.1397)  evaluator_time: 0.0107 (0.0107)  time: 0.1650  data: 0.0127  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1377 (0.1381)  evaluator_time: 0.0088 (0.0091)  time: 0.1608  data: 0.0120  max mem: 1707
Test: Total time: 0:00:03 (0.1608 s / it)
Averaged stats: model_time: 0.1377 (0.1381)  evaluator_time: 0.0088 (0.0091)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.603
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.939
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.762
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.616
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.595
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.432
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.655
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.664
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.636
=====================================
Epoch: [56]  [ 0/40]  eta: 0:00:13  lr: 0.000034  loss: 0.2332 (0.2332)  loss_classifier: 0.1095 (0.1095)  loss_box_reg: 0.1167 (0.1167)  loss_objectness: 0.0007 (0.0007)  loss_rpn_box_reg: 0.0063 (0.0063)  time: 0.3410  data: 0.0205  max mem: 1707
Epoch: [56]  [39/40]  eta: 0:00:00  lr: 0.000034  loss: 0.2415 (0.2513)  loss_classifier: 0.0870 (0.0912)  loss_box_reg: 0.1460 (0.1485)  loss_objectness: 0.0016 (0.0023)  loss_rpn_box_reg: 0.0087 (0.0093)  time: 0.3319  data: 0.0134  max mem: 1707
Epoch: [56] Total time: 0:00:13 (0.3318 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1377 (0.1377)  evaluator_time: 0.0107 (0.0107)  time: 0.1612  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1377 (0.1376)  evaluator_time: 0.0088 (0.0091)  time: 0.1599  data: 0.0119  max mem: 1707
Test: Total time: 0:00:03 (0.1600 s / it)
Averaged stats: model_time: 0.1377 (0.1376)  evaluator_time: 0.0088 (0.0091)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.611
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.938
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.763
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.624
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.598
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.440
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.671
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.634
=====================================
Epoch: [57]  [ 0/40]  eta: 0:00:13  lr: 0.000025  loss: 0.3219 (0.3219)  loss_classifier: 0.1091 (0.1091)  loss_box_reg: 0.1936 (0.1936)  loss_objectness: 0.0024 (0.0024)  loss_rpn_box_reg: 0.0169 (0.0169)  time: 0.3369  data: 0.0146  max mem: 1707
Epoch: [57]  [39/40]  eta: 0:00:00  lr: 0.000025  loss: 0.2328 (0.2405)  loss_classifier: 0.0819 (0.0880)  loss_box_reg: 0.1396 (0.1411)  loss_objectness: 0.0025 (0.0027)  loss_rpn_box_reg: 0.0083 (0.0087)  time: 0.3338  data: 0.0134  max mem: 1707
Epoch: [57] Total time: 0:00:13 (0.3318 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1367 (0.1367)  evaluator_time: 0.0107 (0.0107)  time: 0.1631  data: 0.0137  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1372 (0.1373)  evaluator_time: 0.0098 (0.0093)  time: 0.1598  data: 0.0117  max mem: 1707
Test: Total time: 0:00:03 (0.1598 s / it)
Averaged stats: model_time: 0.1372 (0.1373)  evaluator_time: 0.0098 (0.0093)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.605
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.753
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.619
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.593
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.438
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.656
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.668
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.630
=====================================
Epoch: [58]  [ 0/40]  eta: 0:00:13  lr: 0.000018  loss: 0.3570 (0.3570)  loss_classifier: 0.1414 (0.1414)  loss_box_reg: 0.2024 (0.2024)  loss_objectness: 0.0015 (0.0015)  loss_rpn_box_reg: 0.0116 (0.0116)  time: 0.3453  data: 0.0225  max mem: 1707
Epoch: [58]  [39/40]  eta: 0:00:00  lr: 0.000018  loss: 0.2340 (0.2419)  loss_classifier: 0.0810 (0.0843)  loss_box_reg: 0.1352 (0.1454)  loss_objectness: 0.0016 (0.0034)  loss_rpn_box_reg: 0.0079 (0.0089)  time: 0.3352  data: 0.0143  max mem: 1707
Epoch: [58] Total time: 0:00:13 (0.3351 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1363 (0.1363)  evaluator_time: 0.0117 (0.0117)  time: 0.1616  data: 0.0117  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1368 (0.1373)  evaluator_time: 0.0088 (0.0090)  time: 0.1594  data: 0.0117  max mem: 1707
Test: Total time: 0:00:03 (0.1594 s / it)
Averaged stats: model_time: 0.1368 (0.1373)  evaluator_time: 0.0088 (0.0090)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.609
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.765
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.622
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.439
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.671
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.634
=====================================
Epoch: [59]  [ 0/40]  eta: 0:00:13  lr: 0.000011  loss: 0.2820 (0.2820)  loss_classifier: 0.0899 (0.0899)  loss_box_reg: 0.1795 (0.1795)  loss_objectness: 0.0031 (0.0031)  loss_rpn_box_reg: 0.0094 (0.0094)  time: 0.3336  data: 0.0127  max mem: 1707
Epoch: [59]  [39/40]  eta: 0:00:00  lr: 0.000011  loss: 0.2358 (0.2461)  loss_classifier: 0.0795 (0.0874)  loss_box_reg: 0.1397 (0.1462)  loss_objectness: 0.0018 (0.0035)  loss_rpn_box_reg: 0.0084 (0.0089)  time: 0.3312  data: 0.0139  max mem: 1707
Epoch: [59] Total time: 0:00:13 (0.3379 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:02  model_time: 0.1251 (0.1251)  evaluator_time: 0.0110 (0.0110)  time: 0.1491  data: 0.0120  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1251 (0.1251)  evaluator_time: 0.0090 (0.0091)  time: 0.1467  data: 0.0113  max mem: 1707
Test: Total time: 0:00:02 (0.1468 s / it)
Averaged stats: model_time: 0.1251 (0.1251)  evaluator_time: 0.0090 (0.0091)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.610
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.762
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.622
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.603
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.440
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.661
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.671
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.639
=====================================
Epoch: [60]  [ 0/40]  eta: 0:00:12  lr: 0.000006  loss: 0.3431 (0.3431)  loss_classifier: 0.1200 (0.1200)  loss_box_reg: 0.2027 (0.2027)  loss_objectness: 0.0027 (0.0027)  loss_rpn_box_reg: 0.0177 (0.0177)  time: 0.3103  data: 0.0180  max mem: 1707
Epoch: [60]  [39/40]  eta: 0:00:00  lr: 0.000006  loss: 0.2152 (0.2372)  loss_classifier: 0.0745 (0.0831)  loss_box_reg: 0.1394 (0.1430)  loss_objectness: 0.0016 (0.0024)  loss_rpn_box_reg: 0.0079 (0.0087)  time: 0.3066  data: 0.0126  max mem: 1707
Epoch: [60] Total time: 0:00:12 (0.3061 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:02  model_time: 0.1251 (0.1251)  evaluator_time: 0.0110 (0.0110)  time: 0.1481  data: 0.0110  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1251 (0.1249)  evaluator_time: 0.0090 (0.0088)  time: 0.1463  data: 0.0113  max mem: 1707
Test: Total time: 0:00:02 (0.1464 s / it)
Averaged stats: model_time: 0.1251 (0.1249)  evaluator_time: 0.0090 (0.0088)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.608
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.763
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.622
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.046
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.438
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.671
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.635
=====================================
Epoch: [61]  [ 0/40]  eta: 0:00:12  lr: 0.000003  loss: 0.2392 (0.2392)  loss_classifier: 0.0953 (0.0953)  loss_box_reg: 0.1321 (0.1321)  loss_objectness: 0.0018 (0.0018)  loss_rpn_box_reg: 0.0101 (0.0101)  time: 0.3103  data: 0.0170  max mem: 1707
Epoch: [61]  [39/40]  eta: 0:00:00  lr: 0.000003  loss: 0.2244 (0.2405)  loss_classifier: 0.0810 (0.0873)  loss_box_reg: 0.1265 (0.1409)  loss_objectness: 0.0022 (0.0035)  loss_rpn_box_reg: 0.0081 (0.0088)  time: 0.3062  data: 0.0126  max mem: 1707
Epoch: [61] Total time: 0:00:12 (0.3063 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:02  model_time: 0.1251 (0.1251)  evaluator_time: 0.0110 (0.0110)  time: 0.1491  data: 0.0120  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1251 (0.1253)  evaluator_time: 0.0090 (0.0091)  time: 0.1468  data: 0.0112  max mem: 1707
Test: Total time: 0:00:02 (0.1469 s / it)
Averaged stats: model_time: 0.1251 (0.1253)  evaluator_time: 0.0090 (0.0091)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.610
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.764
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.624
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.599
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.440
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.661
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.673
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.637
=====================================
Epoch: [62]  [ 0/40]  eta: 0:00:12  lr: 0.000001  loss: 0.2150 (0.2150)  loss_classifier: 0.0779 (0.0779)  loss_box_reg: 0.1284 (0.1284)  loss_objectness: 0.0015 (0.0015)  loss_rpn_box_reg: 0.0072 (0.0072)  time: 0.3103  data: 0.0160  max mem: 1707
Epoch: [62]  [39/40]  eta: 0:00:00  lr: 0.000001  loss: 0.2307 (0.2390)  loss_classifier: 0.0820 (0.0855)  loss_box_reg: 0.1289 (0.1410)  loss_objectness: 0.0019 (0.0039)  loss_rpn_box_reg: 0.0080 (0.0085)  time: 0.3054  data: 0.0126  max mem: 1707
Epoch: [62] Total time: 0:00:12 (0.3059 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:02  model_time: 0.1241 (0.1241)  evaluator_time: 0.0100 (0.0100)  time: 0.1461  data: 0.0110  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1261 (0.1256)  evaluator_time: 0.0090 (0.0088)  time: 0.1470  data: 0.0114  max mem: 1707
Test: Total time: 0:00:02 (0.1470 s / it)
Averaged stats: model_time: 0.1261 (0.1256)  evaluator_time: 0.0090 (0.0088)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.610
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.764
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.624
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.440
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.663
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.674
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.639
=====================================
Epoch: [63]  [ 0/40]  eta: 0:00:12  lr: 0.000300  loss: 0.2265 (0.2265)  loss_classifier: 0.1220 (0.1220)  loss_box_reg: 0.0957 (0.0957)  loss_objectness: 0.0014 (0.0014)  loss_rpn_box_reg: 0.0074 (0.0074)  time: 0.3113  data: 0.0160  max mem: 1707
Epoch: [63]  [39/40]  eta: 0:00:00  lr: 0.000300  loss: 0.2791 (0.2888)  loss_classifier: 0.0841 (0.0896)  loss_box_reg: 0.1807 (0.1821)  loss_objectness: 0.0019 (0.0029)  loss_rpn_box_reg: 0.0143 (0.0142)  time: 0.3116  data: 0.0127  max mem: 1707
Epoch: [63] Total time: 0:00:12 (0.3087 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:02  model_time: 0.1241 (0.1241)  evaluator_time: 0.0090 (0.0090)  time: 0.1461  data: 0.0110  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1251 (0.1251)  evaluator_time: 0.0090 (0.0083)  time: 0.1461  data: 0.0112  max mem: 1707
Test: Total time: 0:00:02 (0.1462 s / it)
Averaged stats: model_time: 0.1251 (0.1251)  evaluator_time: 0.0090 (0.0083)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.561
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.920
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.654
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.574
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.552
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.043
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.407
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.613
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.626
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.585
=====================================
Epoch: [64]  [ 0/40]  eta: 0:00:12  lr: 0.000300  loss: 0.3200 (0.3200)  loss_classifier: 0.0734 (0.0734)  loss_box_reg: 0.2238 (0.2238)  loss_objectness: 0.0017 (0.0017)  loss_rpn_box_reg: 0.0211 (0.0211)  time: 0.3053  data: 0.0130  max mem: 1707
Epoch: [64]  [39/40]  eta: 0:00:00  lr: 0.000300  loss: 0.2896 (0.2968)  loss_classifier: 0.0900 (0.0910)  loss_box_reg: 0.1813 (0.1853)  loss_objectness: 0.0035 (0.0040)  loss_rpn_box_reg: 0.0129 (0.0166)  time: 0.3086  data: 0.0129  max mem: 1707
Epoch: [64] Total time: 0:00:12 (0.3068 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:02  model_time: 0.1251 (0.1251)  evaluator_time: 0.0110 (0.0110)  time: 0.1481  data: 0.0110  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1251 (0.1254)  evaluator_time: 0.0080 (0.0085)  time: 0.1463  data: 0.0112  max mem: 1707
Test: Total time: 0:00:02 (0.1464 s / it)
Averaged stats: model_time: 0.1251 (0.1254)  evaluator_time: 0.0080 (0.0085)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.574
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.930
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.706
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.587
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.556
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.044
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.414
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.631
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.645
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.602
=====================================
Epoch: [65]  [ 0/40]  eta: 0:00:12  lr: 0.000299  loss: 0.3511 (0.3511)  loss_classifier: 0.0917 (0.0917)  loss_box_reg: 0.2402 (0.2402)  loss_objectness: 0.0016 (0.0016)  loss_rpn_box_reg: 0.0176 (0.0176)  time: 0.3103  data: 0.0170  max mem: 1707
Epoch: [65]  [39/40]  eta: 0:00:00  lr: 0.000299  loss: 0.2949 (0.2924)  loss_classifier: 0.0805 (0.0836)  loss_box_reg: 0.1835 (0.1894)  loss_objectness: 0.0031 (0.0050)  loss_rpn_box_reg: 0.0116 (0.0143)  time: 0.3056  data: 0.0126  max mem: 1707
Epoch: [65] Total time: 0:00:12 (0.3065 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:02  model_time: 0.1241 (0.1241)  evaluator_time: 0.0100 (0.0100)  time: 0.1471  data: 0.0110  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1241 (0.1248)  evaluator_time: 0.0090 (0.0092)  time: 0.1468  data: 0.0114  max mem: 1707
Test: Total time: 0:00:02 (0.1469 s / it)
Averaged stats: model_time: 0.1241 (0.1248)  evaluator_time: 0.0090 (0.0092)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.611
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.947
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.776
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.618
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.615
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.439
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.661
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.667
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.648
=====================================
Epoch: [66]  [ 0/40]  eta: 0:00:12  lr: 0.000298  loss: 0.2541 (0.2541)  loss_classifier: 0.0779 (0.0779)  loss_box_reg: 0.1653 (0.1653)  loss_objectness: 0.0015 (0.0015)  loss_rpn_box_reg: 0.0094 (0.0094)  time: 0.3063  data: 0.0140  max mem: 1707
Epoch: [66]  [39/40]  eta: 0:00:00  lr: 0.000298  loss: 0.2743 (0.2841)  loss_classifier: 0.0822 (0.0875)  loss_box_reg: 0.1785 (0.1804)  loss_objectness: 0.0027 (0.0033)  loss_rpn_box_reg: 0.0133 (0.0130)  time: 0.3052  data: 0.0124  max mem: 1707
Epoch: [66] Total time: 0:00:12 (0.3056 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1261 (0.1261)  evaluator_time: 0.0110 (0.0110)  time: 0.1511  data: 0.0120  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1251 (0.1253)  evaluator_time: 0.0080 (0.0086)  time: 0.1467  data: 0.0115  max mem: 1707
Test: Total time: 0:00:02 (0.1468 s / it)
Averaged stats: model_time: 0.1251 (0.1253)  evaluator_time: 0.0080 (0.0086)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.598
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.950
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.763
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.611
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.590
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.431
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.670
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.636
=====================================
Epoch: [67]  [ 0/40]  eta: 0:00:12  lr: 0.000297  loss: 0.2010 (0.2010)  loss_classifier: 0.0568 (0.0568)  loss_box_reg: 0.1347 (0.1347)  loss_objectness: 0.0028 (0.0028)  loss_rpn_box_reg: 0.0067 (0.0067)  time: 0.3093  data: 0.0150  max mem: 1707
Epoch: [67]  [39/40]  eta: 0:00:00  lr: 0.000297  loss: 0.2768 (0.2750)  loss_classifier: 0.0816 (0.0851)  loss_box_reg: 0.1619 (0.1727)  loss_objectness: 0.0025 (0.0038)  loss_rpn_box_reg: 0.0117 (0.0134)  time: 0.3060  data: 0.0125  max mem: 1707
Epoch: [67] Total time: 0:00:12 (0.3060 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:02  model_time: 0.1251 (0.1251)  evaluator_time: 0.0100 (0.0100)  time: 0.1481  data: 0.0110  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1251 (0.1259)  evaluator_time: 0.0090 (0.0097)  time: 0.1482  data: 0.0113  max mem: 1707
Test: Total time: 0:00:02 (0.1483 s / it)
Averaged stats: model_time: 0.1251 (0.1259)  evaluator_time: 0.0090 (0.0097)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.593
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.950
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.724
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.598
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.609
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.430
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.646
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.648
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.641
=====================================
Epoch: [68]  [ 0/40]  eta: 0:00:12  lr: 0.000296  loss: 0.3250 (0.3250)  loss_classifier: 0.0880 (0.0880)  loss_box_reg: 0.2212 (0.2212)  loss_objectness: 0.0030 (0.0030)  loss_rpn_box_reg: 0.0128 (0.0128)  time: 0.3103  data: 0.0150  max mem: 1707
Epoch: [68]  [39/40]  eta: 0:00:00  lr: 0.000296  loss: 0.2529 (0.2724)  loss_classifier: 0.0848 (0.0843)  loss_box_reg: 0.1507 (0.1720)  loss_objectness: 0.0021 (0.0033)  loss_rpn_box_reg: 0.0119 (0.0127)  time: 0.3069  data: 0.0126  max mem: 1707
Epoch: [68] Total time: 0:00:12 (0.3076 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:03  model_time: 0.1261 (0.1261)  evaluator_time: 0.0090 (0.0090)  time: 0.1501  data: 0.0140  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1251 (0.1253)  evaluator_time: 0.0090 (0.0090)  time: 0.1470  data: 0.0115  max mem: 1707
Test: Total time: 0:00:02 (0.1471 s / it)
Averaged stats: model_time: 0.1251 (0.1253)  evaluator_time: 0.0090 (0.0090)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.592
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.745
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.605
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.580
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.046
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.426
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.647
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.657
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.626
=====================================
Epoch: [69]  [ 0/40]  eta: 0:00:13  lr: 0.000294  loss: 0.2766 (0.2766)  loss_classifier: 0.0964 (0.0964)  loss_box_reg: 0.1630 (0.1630)  loss_objectness: 0.0025 (0.0025)  loss_rpn_box_reg: 0.0146 (0.0146)  time: 0.3273  data: 0.0150  max mem: 1707
Epoch: [69]  [39/40]  eta: 0:00:00  lr: 0.000294  loss: 0.2653 (0.2823)  loss_classifier: 0.0729 (0.0832)  loss_box_reg: 0.1724 (0.1810)  loss_objectness: 0.0026 (0.0043)  loss_rpn_box_reg: 0.0148 (0.0139)  time: 0.3052  data: 0.0129  max mem: 1707
Epoch: [69] Total time: 0:00:12 (0.3058 s / it)
creating index...
index created!
Test:  [ 0/20]  eta: 0:00:02  model_time: 0.1261 (0.1261)  evaluator_time: 0.0100 (0.0100)  time: 0.1491  data: 0.0110  max mem: 1707
Test:  [19/20]  eta: 0:00:00  model_time: 0.1241 (0.1246)  evaluator_time: 0.0090 (0.0087)  time: 0.1460  data: 0.0113  max mem: 1707
Test: Total time: 0:00:02 (0.1461 s / it)
Averaged stats: model_time: 0.1241 (0.1246)  evaluator_time: 0.0090 (0.0087)
Accumulating evaluation results...
DONE (t=0.01s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.621
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.959
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.772
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.632
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.616
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.048
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.441
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.670
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.678
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.654
=====================================
That's it
[{'boxes': tensor([[ 189.9489,  404.9952,  301.2155,  466.8799],
        [ 182.2701,  465.9408,  310.1549,  531.9520],
        [ 198.6795,  348.8463,  296.8716,  406.2068],
        [ 200.6508,  289.3332,  296.5053,  349.0014],
        [ 200.9376,  106.4814,  303.9833,  162.8448],
        [ 202.3404,  230.0579,  295.0877,  291.8258],
        [ 204.3351,  165.5986,  298.8996,  227.1418],
        [ 197.7101,   60.0252,  307.1428,  106.9887],
        [ 193.7748,  741.3036,  320.2549,  811.5040],
        [ 184.7456,  599.3592,  323.5339,  667.5928],
        [ 202.7566,   11.6371,  304.4091,   59.2564],
        [ 182.0819,  531.8789,  314.9124,  597.6071],
        [ 192.6139,  814.3177,  321.4845,  897.6559],
        [ 177.3948, 1001.5243,  326.7759, 1089.2441],
        [ 187.3709,  670.4134,  330.2131,  740.7347],
        [ 183.8450,  904.0830,  323.9492,  986.4605],
        [ 165.2593, 1089.6801,  328.3294, 1163.2521],
        [ 190.0809,  572.7769,  321.0386,  725.5880],
        [ 170.2501, 1078.8328,  327.0469, 1131.9359],
        [ 188.8839,  648.1003,  321.8775,  799.9612],
        [ 180.1851,  516.0894,  317.3398,  661.7020],
        [ 198.0201,   36.8476,  309.1614,   74.2202]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9992, 0.9992, 0.9990, 0.9990, 0.9990, 0.9988, 0.9988, 0.9987, 0.9985,
        0.9985, 0.9984, 0.9983, 0.9980, 0.9972, 0.9971, 0.9958, 0.7909, 0.3214,
        0.1494, 0.1359, 0.0824, 0.0558], device='cuda:0')}]
22
[{'boxes': tensor([[ 163.2258,  365.7179,  263.8862,  420.9467],
        [ 163.4850,   20.0571,  268.6557,   72.9434],
        [ 160.8745,  248.4747,  251.4303,  302.7392],
        [ 162.5922,  307.4997,  259.9413,  361.1212],
        [ 158.8930,  192.9254,  248.3566,  243.0384],
        [ 159.2533,   84.4053,  259.2730,  130.9560],
        [ 160.7545,  135.4920,  252.3834,  183.9638],
        [ 172.8830,  424.0315,  269.1747,  485.3633],
        [ 196.7360, 1102.6184,  339.8964, 1178.1841],
        [ 228.4012, 1010.5205,  356.7643, 1086.0598],
        [ 159.9256,   70.1616,  254.7642,  204.2716],
        [ 162.1262,  226.0965,  256.4985,  399.7882],
        [ 172.2211,  377.2118,  265.7993,  534.7880],
        [ 210.4969,   17.8924,  265.9572,   77.5260],
        [ 164.2654,  559.6777,  278.0404,  621.7143],
        [ 235.1831,  916.8501,  353.5731,  996.1708],
        [ 158.4045,  490.3203,  266.8801,  557.2702]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9992, 0.9989, 0.9989, 0.9988, 0.9986, 0.9984, 0.9973, 0.9831, 0.9610,
        0.6983, 0.4329, 0.2617, 0.1333, 0.0715, 0.0700, 0.0598, 0.0555],
       device='cuda:0')}]
17
[{'boxes': tensor([[ 160.7677,  480.7365,  270.8499,  539.7516],
        [ 158.8427,  542.4025,  277.3774,  607.2083],
        [ 161.5962,  611.6411,  284.8799,  682.2661],
        [ 184.1965,  115.2066,  279.7901,  168.5306],
        [ 162.5811,  680.7748,  283.9791,  752.6870],
        [ 186.0381,  172.2336,  276.7306,  234.1910],
        [ 182.1467,  237.5397,  274.4752,  300.9798],
        [ 166.1990,  419.1229,  270.2331,  477.1669],
        [ 187.6332,   15.3735,  291.4297,   60.1775],
        [ 170.7953,  359.5343,  269.3312,  416.7893],
        [ 175.0516,  300.9890,  270.0829,  359.7482],
        [ 184.1601,   62.9631,  289.1178,  108.4377],
        [ 163.3017,  832.6548,  290.3865,  916.8342],
        [ 161.9181,  755.4078,  286.6595,  833.1663],
        [ 169.9672,  913.6924,  303.0286, 1001.2225],
        [ 176.2849, 1083.1279,  330.5630, 1184.1484],
        [ 195.5712, 1002.9638,  327.2999, 1086.5834],
        [ 157.2144,  510.4921,  282.6864,  657.8461]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9996, 0.9993, 0.9991, 0.9991, 0.9990, 0.9989, 0.9988, 0.9988, 0.9984,
        0.9982, 0.9982, 0.9981, 0.9958, 0.9927, 0.9912, 0.9754, 0.9015, 0.0606],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 145.2365,  481.4351,  261.7521,  544.7969],
        [ 147.8651,  422.2286,  257.8036,  480.5616],
        [ 143.6192,  548.2869,  267.1023,  615.2065],
        [ 167.1822,  242.4983,  259.4208,  301.1566],
        [ 155.4057,  363.0565,  256.2949,  419.9212],
        [ 170.0289,  186.5050,  261.6909,  241.4522],
        [ 161.2286,  302.7661,  258.7609,  360.7180],
        [ 182.0791,   21.5423,  290.7623,   74.8138],
        [ 171.4093,  133.6388,  267.8882,  183.6900],
        [ 176.4875,   78.7661,  279.8041,  132.2500],
        [ 178.6678,  924.4876,  298.0166, 1000.9158],
        [ 160.3684,  840.2729,  289.7563,  917.5847],
        [ 142.7288,  610.4551,  269.5009,  689.0133],
        [ 202.8161, 1095.4269,  326.9953, 1186.0515],
        [ 155.0849,  761.7265,  283.0595,  833.5466],
        [ 152.5276,  689.5038,  286.2499,  754.1917],
        [ 195.8326, 1005.0983,  317.3869, 1074.1688],
        [ 161.6001,  380.9332,  213.8121,  410.2579],
        [ 132.0238,  520.4451,  264.5812,  666.4440],
        [ 186.7513,   92.3382,  251.8572,  122.8053],
        [ 167.0534,  146.5543,  266.4130,  236.9088]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9991, 0.9991, 0.9990, 0.9990, 0.9987, 0.9985, 0.9979, 0.9976, 0.9967,
        0.9941, 0.9937, 0.9916, 0.9881, 0.9683, 0.9440, 0.9054, 0.5139, 0.1500,
        0.0865, 0.0689, 0.0620], device='cuda:0')}]
21
[{'boxes': tensor([[260.2704, 732.6021, 379.7719, 814.0496],
        [232.2089, 453.8361, 336.5770, 521.4504],
        [260.2443, 653.2111, 372.9174, 732.6952],
        [243.1524, 518.3657, 349.1149, 591.9325],
        [218.1670, 380.5724, 324.0534, 459.1368],
        [172.7308,  15.4750, 270.9970,  74.5918],
        [208.8302, 313.3270, 310.9648, 388.0862],
        [197.6610, 252.1728, 287.9842, 317.3774],
        [181.2231, 135.9859, 267.9189, 189.6098],
        [184.8180, 190.4837, 271.4298, 253.3015],
        [176.4704,  78.3070, 268.2271, 132.7081],
        [250.6051, 577.2234, 361.3466, 657.7826],
        [247.7371, 810.2996, 372.9883, 902.0478],
        [195.1173, 197.5625, 278.4632, 310.5304],
        [256.3068, 601.4139, 358.2705, 722.2358],
        [182.9283, 110.7624, 269.2341, 218.3783],
        [186.5527,  91.0886, 247.2550, 126.1455],
        [236.2767, 894.3019, 371.3365, 987.8475],
        [224.0050, 312.4889, 255.1931, 388.2457]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9992, 0.9991, 0.9991, 0.9991, 0.9988, 0.9988, 0.9987, 0.9982, 0.9982,
        0.9978, 0.9975, 0.9971, 0.9960, 0.2048, 0.1808, 0.1185, 0.0893, 0.0589,
        0.0586], device='cuda:0')}]
19
[{'boxes': tensor([[ 196.4934,  396.0743,  296.1120,  452.9941],
        [ 189.0957,  456.1319,  298.3496,  520.2731],
        [ 198.6661,  330.1478,  296.7577,  391.2678],
        [ 207.7079,   20.7756,  309.9220,   82.4394],
        [ 182.3017,  519.7536,  301.2050,  588.1399],
        [ 206.7414,   89.2513,  302.4762,  139.9184],
        [ 164.2931,  656.8694,  291.6570,  734.6934],
        [ 175.0870,  581.6360,  300.3028,  659.1870],
        [ 211.4226,  145.5456,  298.4471,  200.1484],
        [ 186.2878,  986.4386,  322.8353, 1078.1484],
        [ 204.1548,  267.7760,  301.3510,  328.2446],
        [ 210.8588,  206.7670,  301.2234,  268.7378],
        [ 183.9021, 1082.7358,  324.6275, 1184.7686],
        [ 160.4773,  733.7608,  292.4459,  809.0223],
        [ 179.2700,  898.7865,  306.5792,  981.6998],
        [ 205.9392,  215.5287,  300.4773,  352.1860],
        [ 162.5592,  555.3721,  303.5212,  736.3042],
        [ 196.0464,  516.1108,  226.6315,  586.4556]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9994, 0.9992, 0.9988, 0.9988, 0.9988, 0.9987, 0.9986, 0.9981, 0.9980,
        0.9977, 0.9969, 0.9963, 0.9920, 0.9917, 0.9842, 0.1559, 0.0731, 0.0681],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 241.6297,  395.2477,  341.9740,  457.4111],
        [ 233.1094,   19.6343,  332.1041,   76.3564],
        [ 232.6092,   83.5365,  328.6871,  140.1810],
        [ 243.5382,  329.0662,  342.7783,  393.9139],
        [ 247.3995,  266.3171,  337.0665,  325.9030],
        [ 246.6809,  203.1655,  334.4494,  263.7648],
        [ 178.1485,  985.2398,  311.8588, 1076.5120],
        [ 236.3329,  142.1382,  332.9363,  200.9367],
        [ 227.1481,  586.7302,  342.9070,  668.8589],
        [ 244.2002,  461.4047,  345.8860,  529.3825],
        [ 196.2678,  898.6561,  309.9981,  988.3743],
        [ 220.1467,  669.4706,  344.8554,  740.6834],
        [ 209.4041,  737.1741,  339.9618,  813.8766],
        [ 244.2537,  530.7742,  341.0579,  587.3062],
        [ 204.9170,  817.5099,  322.7911,  899.2541],
        [ 244.1916,  272.5161,  340.2516,  381.2422],
        [ 205.5043,  799.1500,  316.0660,  963.0364]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9992, 0.9992, 0.9991, 0.9987, 0.9986, 0.9985, 0.9980, 0.9976, 0.9969,
        0.9960, 0.9955, 0.9946, 0.9928, 0.9921, 0.9853, 0.1338, 0.1256],
       device='cuda:0')}]
17
[{'boxes': tensor([[ 216.0743,  656.2417,  339.0617,  727.9563],
        [ 205.9820,  454.6497,  309.2162,  515.0454],
        [ 211.8334,  515.0543,  323.8791,  584.6834],
        [ 161.1686,   20.1439,  272.6861,   72.9710],
        [ 194.4077,  325.9241,  290.3666,  390.4814],
        [ 159.6539,   82.1054,  270.9021,  131.7677],
        [ 200.4851,  390.0101,  298.7205,  453.4926],
        [ 223.5617,  729.3118,  348.2714,  812.9457],
        [ 214.5621,  580.3860,  330.0851,  656.2809],
        [ 167.0957,  140.9207,  272.3593,  192.3403],
        [ 192.5545,  264.6632,  283.5696,  326.8948],
        [ 224.8539,  812.3478,  351.1993,  900.1207],
        [ 180.3419,  201.2873,  275.4990,  263.3770],
        [ 226.7290,  901.0952,  352.7905,  988.6030],
        [ 214.9305,  991.7913,  348.7923, 1078.6243],
        [ 197.5337, 1086.6632,  346.1270, 1169.4619],
        [ 216.0237,  813.2943,  350.3272,  996.6089],
        [ 224.3351,  516.1060,  257.3905,  582.7044],
        [ 235.8541,  140.5826,  261.0338,  190.3328]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9994, 0.9994, 0.9993, 0.9992, 0.9991, 0.9991, 0.9991, 0.9989, 0.9989,
        0.9988, 0.9985, 0.9984, 0.9981, 0.9971, 0.9963, 0.9430, 0.0958, 0.0723,
        0.0525], device='cuda:0')}]
19
[{'boxes': tensor([[ 135.5428,  349.8396,  242.2283,  415.5966],
        [ 126.6105,  416.1155,  239.6166,  484.0692],
        [ 143.0782,  285.1844,  237.5542,  345.1382],
        [ 162.4583,   99.7500,  260.5934,  160.2195],
        [ 132.8634,  481.3017,  253.0961,  550.5511],
        [ 152.1079,  168.8364,  247.1008,  218.8865],
        [ 234.8192,  973.3913,  365.5569, 1071.3743],
        [ 150.0570,  226.5806,  235.9890,  276.7189],
        [ 178.1368,   41.6568,  266.8593,   92.3320],
        [ 214.8846, 1084.9485,  346.4593, 1172.1354],
        [ 235.4308,  874.1805,  368.1370,  960.3434],
        [ 140.4462,  551.3133,  264.5246,  627.1311],
        [ 188.4958,  285.6216,  235.7148,  345.0916],
        [ 210.3159,  792.3641,  366.7702,  868.6503],
        [ 130.5671,  358.6848,  240.9005,  468.7572],
        [ 156.2419,  237.9761,  217.4333,  266.5106]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9995, 0.9992, 0.9986, 0.9978, 0.9962, 0.9953, 0.9936, 0.9924, 0.9876,
        0.9730, 0.9003, 0.4008, 0.1252, 0.0640, 0.0615, 0.0541],
       device='cuda:0')}]
16
[{'boxes': tensor([[ 204.0401,  657.4120,  326.6774,  729.6521],
        [ 200.4012,  454.0025,  307.0694,  521.3463],
        [ 166.0976,   17.9388,  274.2253,   77.6198],
        [ 191.0335,  316.4046,  294.2713,  382.8223],
        [ 196.1225,  382.5889,  301.2549,  453.6864],
        [ 204.4824,  731.7197,  328.7635,  806.4257],
        [ 187.9773,  251.7088,  287.5169,  314.0627],
        [ 166.5480,   78.1452,  271.8705,  133.0110],
        [ 185.9953,  192.8728,  278.8723,  249.2743],
        [ 204.3196,  586.2906,  322.0465,  656.9750],
        [ 210.2928,  806.8554,  327.2822,  897.1022],
        [ 203.5565,  523.9881,  320.0488,  593.1317],
        [ 205.8151,  897.9564,  326.0486,  986.1747],
        [ 177.1072,  134.1213,  274.7737,  189.4721],
        [ 194.8533, 1096.2854,  326.5837, 1185.8860],
        [ 198.0819,  991.1500,  330.9302, 1081.6835],
        [ 198.0220,  315.3865,  227.1715,  381.5738],
        [ 206.8792,  537.6219,  323.6249,  678.1721]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9994, 0.9994, 0.9993, 0.9992, 0.9992, 0.9989, 0.9984,
        0.9984, 0.9983, 0.9981, 0.9978, 0.9978, 0.9974, 0.9967, 0.0839, 0.0508],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 216.0245,  563.9805,  325.4282,  638.2375],
        [ 214.2748,  364.6208,  312.4826,  428.6244],
        [ 210.5711,  638.1910,  335.7413,  720.7724],
        [ 216.9015,  492.6272,  319.2690,  567.7646],
        [ 219.4765,  431.2903,  316.6966,  494.9638],
        [ 215.7750,  302.6356,  304.7054,  363.5131],
        [ 210.6570,  802.2825,  340.0037,  891.2744],
        [ 212.9992,  717.1348,  340.5882,  802.0800],
        [ 220.7339,  244.0723,  304.3683,  300.7787],
        [ 230.7247,  176.4990,  313.1247,  241.8377],
        [ 229.7997,   16.0495,  331.5315,   71.2014],
        [ 188.0579,  982.3134,  323.1268, 1083.2920],
        [ 201.3930,  890.7742,  331.9064,  988.3416],
        [ 228.6523,   76.2724,  316.9279,  123.7025],
        [ 230.2723,  124.0748,  314.8302,  176.9395],
        [ 167.4399, 1078.2527,  312.9533, 1183.7278]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9995, 0.9993, 0.9993, 0.9992, 0.9990, 0.9987, 0.9986, 0.9982, 0.9981,
        0.9978, 0.9977, 0.9977, 0.9977, 0.9963, 0.9939, 0.9935],
       device='cuda:0')}]
16
[{'boxes': tensor([[ 199.6936,  642.1921,  321.7517,  722.2684],
        [ 202.1331,  566.2724,  316.8166,  642.9365],
        [ 210.4011,  427.5632,  313.7645,  494.3600],
        [ 209.1697,  365.5072,  308.5053,  426.7581],
        [ 208.2458,  493.6891,  315.5189,  570.3865],
        [ 203.4052,  719.8440,  320.7033,  810.4203],
        [ 214.5671,  303.0251,  304.5523,  364.6797],
        [ 191.6717,  897.4205,  322.4290,  993.3755],
        [ 200.3542,  807.3192,  322.4942,  898.4296],
        [ 221.8310,  238.8936,  307.2255,  302.9757],
        [ 225.1108,   17.4135,  321.1187,   69.7269],
        [ 228.9920,  175.0992,  311.1232,  237.8090],
        [ 175.3955, 1086.5885,  321.7264, 1188.9069],
        [ 186.2016,  992.9210,  318.8372, 1088.7902],
        [ 227.8093,  120.8843,  314.4670,  172.9462],
        [ 223.9077,   73.9126,  313.6583,  119.3239],
        [ 233.2700,    0.0000,  320.0440,  128.8249]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9996, 0.9995, 0.9994, 0.9994, 0.9993, 0.9987, 0.9986, 0.9986, 0.9984,
        0.9983, 0.9980, 0.9980, 0.9979, 0.9978, 0.9978, 0.9965, 0.0864],
       device='cuda:0')}]
17
[{'boxes': tensor([[ 190.2355,  255.8027,  292.7819,  323.6085],
        [ 187.2532,  199.6606,  282.7225,  258.2428],
        [ 154.0480,   26.3959,  255.9111,   72.1024],
        [ 204.3079,  569.9670,  331.1183,  642.8851],
        [ 206.0922,  319.1122,  300.9218,  385.1617],
        [ 190.2664,  895.4124,  326.0782,  990.1503],
        [ 205.8872,  502.7101,  322.0396,  573.1774],
        [ 208.0912,  433.5874,  317.5538,  508.8420],
        [ 201.8629,  642.0273,  334.6436,  723.5037],
        [ 184.7569,  143.9500,  273.3634,  198.7999],
        [ 161.4571,   82.3922,  265.8643,  140.2025],
        [ 202.8875,  805.9162,  334.7996,  899.1234],
        [ 206.5083,  718.3007,  339.5987,  806.8749],
        [ 214.7477,  376.8223,  307.9908,  437.4711],
        [ 180.3986,  988.7097,  328.3325, 1086.5270],
        [ 175.9316, 1092.3877,  340.3593, 1186.8920],
        [ 197.0688,  200.0577,  225.9657,  258.2688],
        [ 197.0612,  257.8705,  228.3450,  322.7709],
        [ 209.4454,  143.3303,  243.9079,  199.5001]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9991, 0.9989, 0.9989, 0.9988, 0.9988, 0.9987, 0.9986, 0.9986, 0.9985,
        0.9981, 0.9980, 0.9979, 0.9975, 0.9975, 0.9965, 0.9946, 0.2767, 0.1415,
        0.0612], device='cuda:0')}]
19
[{'boxes': tensor([[ 227.3518,  369.2976,  323.3880,  426.5538],
        [ 220.7913,  494.7208,  325.6637,  560.6550],
        [ 230.0224,  431.9760,  323.1813,  492.1856],
        [ 205.0216,  561.4855,  327.7462,  636.3193],
        [ 229.3172,  309.1707,  320.5768,  361.4151],
        [ 230.1942,  244.0043,  322.6383,  304.7164],
        [ 240.2823,  122.2324,  332.2578,  163.1831],
        [ 163.5201,  979.6526,  306.6432, 1077.0121],
        [ 170.7124,  790.2526,  302.0351,  882.5312],
        [ 235.1557,  178.0671,  325.1552,  234.6169],
        [ 176.2073,  710.1974,  315.7917,  792.4327],
        [ 188.9642,  632.3954,  330.3864,  714.9584],
        [ 160.9165,  884.6985,  294.5164,  974.6056],
        [ 244.7558,   26.5837,  343.5966,   68.2315],
        [ 242.6747,   81.4019,  334.9407,  115.2313],
        [ 179.9642, 1073.5331,  318.7263, 1162.4611],
        [ 244.5986,   69.7607,  337.5289,  103.9278],
        [ 239.1099,   82.1529,  338.3577,  150.3503],
        [ 242.0650,   34.6610,  344.3900,   94.5868],
        [ 239.8974,   94.3233,  334.8820,  127.1213],
        [ 242.1531,   57.9499,  340.7647,   87.0758],
        [ 239.6258,  109.0856,  333.8229,  144.8829],
        [ 224.1209,  448.1137,  324.6286,  536.0956]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9994, 0.9993, 0.9989, 0.9987, 0.9986, 0.9972, 0.9971, 0.9970, 0.9969,
        0.9966, 0.9966, 0.9959, 0.9958, 0.9897, 0.9729, 0.9385, 0.3589, 0.3566,
        0.3156, 0.3092, 0.1655, 0.0971, 0.0667], device='cuda:0')}]
23
[{'boxes': tensor([[ 206.3103,  333.6155,  303.7113,  394.0071],
        [ 202.2384,  536.2283,  312.6839,  600.9859],
        [ 203.3643,  464.8560,  316.2329,  535.2480],
        [ 202.7773,   82.0279,  298.0743,  134.1857],
        [ 204.1946,  398.8028,  307.9338,  462.8423],
        [ 213.4921,  206.1060,  301.5477,  267.3249],
        [ 194.5159,  601.5339,  314.0262,  674.7147],
        [ 209.7439,  271.3921,  304.7842,  331.5287],
        [ 206.2641,  139.0689,  300.4028,  201.9564],
        [ 194.2850,  834.8096,  306.6084,  903.3616],
        [ 185.2179,  997.1517,  324.6952, 1082.6445],
        [ 209.7668,   21.5047,  300.6660,   73.9103],
        [ 196.3261,  906.0202,  313.5756,  992.6021],
        [ 201.1801,  675.2366,  306.6071,  754.4277],
        [ 199.0295,  761.4133,  307.5901,  831.7594],
        [ 176.4144, 1088.4221,  333.1161, 1187.8473]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9995, 0.9993, 0.9993, 0.9993, 0.9992, 0.9991, 0.9990, 0.9989, 0.9989,
        0.9973, 0.9972, 0.9969, 0.9966, 0.9965, 0.9955, 0.9951],
       device='cuda:0')}]
16
[{'boxes': tensor([[ 208.0029,  672.0770,  325.7744,  754.0585],
        [ 200.4831,  474.9846,  310.8597,  537.1600],
        [ 208.1705,  604.1594,  321.3053,  674.2166],
        [ 199.6848,  418.9077,  298.1632,  474.9735],
        [ 195.9937,  360.7809,  289.8137,  418.2093],
        [ 203.3146,  537.5613,  317.0253,  602.8478],
        [ 171.2874,   16.0197,  282.7074,   71.5440],
        [ 191.6316,  303.2673,  281.0212,  360.3678],
        [ 178.0616,  188.6883,  273.4361,  245.8716],
        [ 197.9657, 1008.2422,  329.1201, 1096.2888],
        [ 208.2879,  752.8431,  324.9840,  837.2205],
        [ 175.3341,  129.4288,  268.8390,  182.8397],
        [ 187.4216,  249.6579,  275.7325,  300.9500],
        [ 201.2901,  921.0044,  329.2116, 1002.7741],
        [ 173.6839,   75.9580,  273.4953,  126.4871],
        [ 204.1390,  836.9972,  326.3292,  917.2411],
        [ 181.8867, 1110.6375,  343.7099, 1189.7656],
        [ 191.8013,  261.8621,  244.3700,  296.2179],
        [ 183.8548,  213.7595,  277.0836,  287.8268]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9988, 0.9987, 0.9986, 0.9984,
        0.9978, 0.9974, 0.9972, 0.9971, 0.9970, 0.9966, 0.9964, 0.9949, 0.1288,
        0.0543], device='cuda:0')}]
19
[{'boxes': tensor([[ 216.6082,  648.2571,  335.7855,  724.0254],
        [ 219.7047,  510.5613,  330.6956,  575.1210],
        [ 215.5414,  577.7599,  332.7035,  646.7925],
        [ 220.4472,  727.0161,  341.7701,  800.8030],
        [ 214.7041,  805.7172,  347.4025,  889.5800],
        [ 234.7986,  262.8896,  320.0595,  315.8593],
        [ 230.2318,  319.7325,  323.0907,  377.3202],
        [ 227.0488,  448.6461,  322.5571,  506.6247],
        [ 236.4155,  141.9407,  325.6482,  189.6855],
        [ 238.5032,  199.3587,  322.6445,  258.8080],
        [ 228.1730,  383.6732,  320.6377,  445.8209],
        [ 236.0838,   91.6314,  328.6333,  131.6942],
        [ 200.4164,  889.2465,  346.6198,  978.1042],
        [ 226.9246,   35.0006,  342.5982,   85.5966],
        [ 172.0974, 1076.2648,  319.8484, 1168.5117],
        [ 231.7425,   70.0613,  341.4981,  139.5753],
        [ 225.9719,  576.1143,  255.3065,  645.5168],
        [ 219.7665,   14.6716,  346.4118,   67.4744],
        [ 221.4980,    5.0709,  354.0346,   29.0654],
        [ 226.0381,   55.7684,  341.9493,  109.6223],
        [ 243.8857,  213.2383,  302.7962,  241.5266],
        [ 244.3787,  151.7120,  303.9947,  181.2250]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9991, 0.9989, 0.9987, 0.9984, 0.9972, 0.9965, 0.9958, 0.9948, 0.9948,
        0.9944, 0.9941, 0.9928, 0.9916, 0.9843, 0.8342, 0.4229, 0.1554, 0.0929,
        0.0825, 0.0743, 0.0734, 0.0700], device='cuda:0')}]
22
[{'boxes': tensor([[ 176.8775,  655.1749,  299.8123,  729.1541],
        [ 184.8593,  511.4387,  299.0479,  575.7288],
        [ 182.1611,  579.1514,  300.4967,  651.2073],
        [ 187.1952,  442.5349,  301.0099,  510.2324],
        [ 195.9940,  376.7304,  303.5986,  443.6187],
        [ 179.3155,  906.4168,  306.4209,  983.0074],
        [ 174.1895,  736.3118,  300.2076,  815.0762],
        [ 175.0638,  818.7587,  303.8173,  900.8901],
        [ 207.6679,  318.9100,  293.8562,  375.1680],
        [ 171.3563,  988.4288,  306.0509, 1075.3431],
        [ 208.5903,  260.0641,  292.4316,  315.7688],
        [ 209.3666,  127.7401,  315.3222,  188.8960],
        [ 213.6655,  194.9601,  300.1065,  251.7739],
        [ 223.9129,   33.2499,  329.1158,   74.8454],
        [ 227.1264,   82.8345,  321.2258,  125.7868],
        [ 158.6511, 1081.8999,  297.3070, 1170.1362],
        [ 221.6794,   86.7944,  318.8503,  184.6235],
        [ 224.9941,   49.4898,  325.9362,   84.6639],
        [ 224.4602,   70.4857,  322.6872,  108.1477],
        [ 227.4878,   46.1953,  332.1523,  122.6420]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9992, 0.9992, 0.9988, 0.9987, 0.9986, 0.9981, 0.9976, 0.9966, 0.9950,
        0.9948, 0.9895, 0.9881, 0.9861, 0.9831, 0.9749, 0.9705, 0.2038, 0.1510,
        0.0534, 0.0529], device='cuda:0')}]
20
[{'boxes': tensor([[ 213.8081,  574.2694,  327.7253,  641.9091],
        [ 219.3397,  503.6986,  332.1327,  571.0925],
        [ 223.1534,  440.2656,  335.8698,  504.8600],
        [ 205.5368,  646.8141,  326.2542,  721.5989],
        [ 183.0093,  893.1037,  310.8366,  983.8198],
        [ 191.4624,  805.6660,  329.8081,  892.1803],
        [ 163.7224, 1090.7396,  304.2168, 1182.1677],
        [ 228.5140,  377.7844,  325.5472,  437.2003],
        [ 220.8444,  193.4220,  319.4753,  250.4081],
        [ 167.4361,  986.6697,  306.2792, 1081.4314],
        [ 226.5283,   29.3931,  319.7157,   76.3417],
        [ 223.6332,  256.9985,  313.0693,  312.4913],
        [ 201.7945,  723.6472,  337.4114,  804.2272],
        [ 227.1400,  316.2680,  313.1335,  370.8606],
        [ 224.1188,  138.4880,  317.4170,  187.3591],
        [ 227.0624,   88.3173,  319.3670,  133.3405],
        [ 168.2852,  958.3146,  306.1093, 1184.3988],
        [ 233.7214,   83.4251,  326.0157,  166.6328],
        [ 240.2914,   95.1870,  305.0076,  124.9424],
        [ 165.6790, 1143.1285,  298.9578, 1194.2172],
        [ 234.4777,  150.9387,  304.0022,  181.5629]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9992, 0.9992, 0.9987, 0.9985, 0.9974, 0.9969, 0.9966, 0.9956, 0.9955,
        0.9953, 0.9946, 0.9945, 0.9941, 0.9939, 0.9928, 0.9899, 0.6210, 0.0980,
        0.0573, 0.0562, 0.0507], device='cuda:0')}]
21
[{'boxes': tensor([[ 169.2139,  448.0446,  273.0506,  516.2533],
        [ 163.7566,  381.2737,  263.8238,  449.2280],
        [ 156.0604,  315.7088,  256.5517,  384.6681],
        [ 154.9809,   79.0282,  253.4308,  133.4293],
        [ 194.7495,  650.8279,  314.2772,  730.4064],
        [ 156.9184,  259.4603,  246.8625,  321.2571],
        [ 160.1443,  138.2543,  252.0715,  192.2733],
        [ 180.4617,  512.5937,  288.1283,  587.2628],
        [ 213.7569,  901.9309,  345.9713,  991.4011],
        [ 185.7879,  575.1341,  303.1532,  657.9251],
        [ 199.3519, 1091.8794,  357.8043, 1185.9614],
        [ 209.9245,  808.4294,  337.2188,  899.1187],
        [ 159.7410,  198.7013,  247.5287,  256.4544],
        [ 207.4686,  992.9614,  350.9697, 1085.2150],
        [ 203.0834,  729.7284,  325.6576,  808.5947],
        [ 158.9629,   16.4122,  254.6244,   70.7470],
        [ 167.0065,  315.6216,  195.8652,  382.6139],
        [ 181.5293,  543.9143,  301.2001,  705.6954],
        [ 168.9180,  198.2175,  198.3196,  255.0662],
        [ 174.6439,  149.8223,  244.4852,  184.6049]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9994, 0.9992, 0.9988, 0.9987, 0.9986, 0.9983, 0.9983, 0.9980, 0.9978,
        0.9978, 0.9977, 0.9977, 0.9976, 0.9973, 0.9971, 0.9966, 0.1805, 0.1182,
        0.0869, 0.0844], device='cuda:0')}]
20
[4mReloaded modules[24m: engine, utils_rcnn, coco_eval, coco_utils, transforms, SpineDataset, ShowBbox
[{'boxes': tensor([[ 200.7669,  367.1003,  298.3734,  428.6082],
        [ 207.0068,  628.5907,  330.3566,  705.3973],
        [ 208.2687,  560.5630,  322.2335,  629.8398],
        [ 197.0081,  302.7938,  295.6660,  366.7894],
        [ 203.7131,  499.9254,  315.8831,  562.7782],
        [ 191.4581,  126.3412,  280.0865,  184.2464],
        [ 198.9209,  431.5290,  305.7481,  498.2117],
        [ 188.4446,   68.3754,  278.7983,  125.2464],
        [ 193.7283,  243.9938,  287.1930,  302.7802],
        [ 193.9442,  185.4515,  282.6284,  244.1117],
        [ 187.2198,  976.3527,  339.0446, 1090.4080],
        [ 191.6595,   10.8295,  272.5214,   65.4390],
        [ 204.8995,  708.4620,  339.5954,  791.8917],
        [ 209.4846,  793.4772,  347.2563,  884.1978],
        [ 202.1826,  884.6304,  346.5724,  978.8462],
        [ 154.1163, 1078.5490,  321.1891, 1198.4437],
        [ 200.5409,  504.7391,  318.1644,  632.6250],
        [ 195.1957,  262.3334,  234.9229,  293.5150]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9996, 0.9995, 0.9995, 0.9994, 0.9993, 0.9993, 0.9993, 0.9992, 0.9992,
        0.9992, 0.9983, 0.9981, 0.9974, 0.9973, 0.9972, 0.9960, 0.0725, 0.0659],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 210.7165,  523.5717,  318.2766,  590.9423],
        [ 220.8006,  399.8008,  314.7540,  458.3230],
        [ 228.4509,  223.0418,  316.8283,  279.3360],
        [ 189.6023,  659.9024,  313.5885,  736.1030],
        [ 222.7859,  338.2551,  313.9274,  397.0027],
        [ 200.5886,  590.2192,  317.0278,  658.6683],
        [ 220.2623,   62.8666,  306.4733,  109.0474],
        [ 215.6927,  461.1252,  317.3609,  524.5425],
        [ 228.3968,  282.9345,  317.7720,  338.3865],
        [ 222.9078,  164.1955,  313.2492,  221.2634],
        [ 222.8438,  111.5252,  306.9008,  161.1392],
        [ 216.0149,   12.2810,  306.2329,   55.8371],
        [ 179.0158,  820.5934,  301.6579,  902.7184],
        [ 171.7097,  997.9106,  308.2765, 1086.6295],
        [ 171.2418,  907.8895,  300.6215,  991.2573],
        [ 183.8930,  737.7489,  305.4146,  817.0466],
        [ 189.1488, 1097.6519,  324.9505, 1198.1735],
        [ 181.3652, 1151.8386,  348.5798, 1196.4155]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9994, 0.9993, 0.9992, 0.9991, 0.9991, 0.9990, 0.9989,
        0.9986, 0.9982, 0.9978, 0.9978, 0.9970, 0.9969, 0.9968, 0.9956, 0.0968],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 220.7907,  452.4186,  316.6066,  508.9373],
        [ 199.4360,  653.4467,  317.5798,  727.0380],
        [ 212.1858,  515.2184,  318.1769,  573.6868],
        [ 206.8014,  580.0883,  315.9912,  648.8010],
        [ 231.2587,  276.3754,  315.1872,  330.5302],
        [ 228.0346,  219.3623,  316.6725,  273.4078],
        [ 224.8120,  392.5673,  314.4448,  448.1287],
        [ 229.1846,  334.1365,  314.2483,  388.7926],
        [ 182.1792, 1003.9844,  319.2497, 1090.4597],
        [ 224.4583,   10.2915,  311.6473,   62.5339],
        [ 195.6038,  732.6715,  315.4257,  810.8374],
        [ 186.8152,  907.7847,  317.9997,  995.8033],
        [ 191.7053,  816.9341,  315.5509,  902.8263],
        [ 183.8258, 1094.6451,  318.0680, 1188.4683],
        [ 232.1617,  117.3627,  313.4265,  162.2500],
        [ 229.6021,  167.7937,  315.9103,  214.6818],
        [ 231.0785,   70.6236,  312.2175,  113.7577],
        [ 180.1273,  983.9042,  322.4766, 1190.9823]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9994, 0.9993, 0.9993, 0.9992, 0.9989, 0.9988, 0.9985, 0.9985, 0.9981,
        0.9975, 0.9965, 0.9962, 0.9957, 0.9955, 0.9947, 0.9945, 0.9932, 0.8342],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 220.9735,  365.7587,  317.8938,  429.8976],
        [ 216.9734,  431.1136,  318.0680,  496.5613],
        [ 213.4125,  564.2971,  324.0469,  634.2814],
        [ 210.1416,  635.3292,  328.1697,  708.7150],
        [ 211.0958,  497.6397,  320.7028,  566.8113],
        [ 226.9122,  302.3714,  316.1284,  365.1384],
        [ 227.0117,   13.4647,  317.2498,   71.8261],
        [ 227.7090,   73.4987,  325.8352,  134.6344],
        [ 193.2003,  978.4650,  324.3420, 1078.0631],
        [ 231.6003,  243.6650,  321.2500,  303.5267],
        [ 240.0107,  184.9894,  322.5622,  244.5911],
        [ 206.3493,  711.6535,  325.0692,  788.9584],
        [ 177.6411, 1076.0870,  318.8429, 1192.8987],
        [ 199.6696,  880.8822,  326.8375,  972.0882],
        [ 237.5606,  132.2544,  325.2695,  188.2294],
        [ 201.6294,  794.7690,  323.5120,  875.0484],
        [ 238.7325,  121.0511,  322.7192,  242.7501],
        [ 235.2318,  207.1303,  322.5803,  403.7787]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9994, 0.9994, 0.9994, 0.9993, 0.9993, 0.9992, 0.9989, 0.9989, 0.9989,
        0.9988, 0.9985, 0.9983, 0.9978, 0.9968, 0.9962, 0.9959, 0.7149, 0.3383],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 220.8420,    9.9194,  315.2703,   66.0559],
        [ 230.1543,  447.1229,  328.9440,  513.2612],
        [ 228.3512,  250.0427,  317.2896,  307.8604],
        [ 226.5186,  515.1819,  330.5249,  584.3699],
        [ 231.3043,  380.7741,  327.6168,  445.5336],
        [ 220.2396,  750.3638,  335.1392,  826.7014],
        [ 218.5980,   65.6161,  311.5945,  123.8644],
        [ 225.6021,  584.6877,  331.8308,  661.0946],
        [ 224.2796,  663.4700,  333.7730,  745.6431],
        [ 216.3617,  830.2675,  326.4367,  902.2393],
        [ 234.7102,  315.2063,  320.8641,  374.3487],
        [ 177.5003, 1083.7421,  314.8813, 1189.3673],
        [ 223.9303,  125.3714,  307.8891,  185.5322],
        [ 196.7614,  987.2468,  313.9852, 1075.4725],
        [ 227.8161,  190.1790,  308.6533,  243.7556],
        [ 204.5846,  899.3845,  314.8735,  987.8806]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9994, 0.9993, 0.9993, 0.9992, 0.9990, 0.9988, 0.9988, 0.9987, 0.9986,
        0.9985, 0.9984, 0.9983, 0.9981, 0.9979, 0.9977, 0.9962],
       device='cuda:0')}]
16
[{'boxes': tensor([[ 226.7509,  186.3389,  326.3040,  249.4089],
        [ 175.1524,  572.3326,  292.3373,  642.2656],
        [ 170.5393,  505.7099,  281.7714,  567.6402],
        [ 170.0922,  441.0310,  272.0180,  502.8692],
        [ 234.8196,  121.2076,  330.4017,  184.4624],
        [ 181.4115,  643.2095,  296.7392,  720.9598],
        [ 240.8564,   65.7935,  339.2422,  121.2249],
        [ 175.9122,  377.2236,  270.3040,  439.9340],
        [ 256.7852,   12.2148,  353.7278,   62.7058],
        [ 179.7846,  725.9604,  303.3662,  810.0483],
        [ 185.0510,  316.1710,  273.4241,  376.8627],
        [ 209.8869,  253.7952,  301.5441,  314.1198],
        [ 181.0775,  815.0639,  300.1956,  900.0358],
        [ 155.5995, 1010.5989,  297.3484, 1098.1466],
        [ 146.2938, 1110.5282,  307.5544, 1197.9319],
        [ 165.3070,  907.6020,  305.1779, 1000.7386]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9996, 0.9995, 0.9993, 0.9993, 0.9992, 0.9992, 0.9991, 0.9988, 0.9984,
        0.9981, 0.9973, 0.9964, 0.9951, 0.9936, 0.9905, 0.9847],
       device='cuda:0')}]
16
[{'boxes': tensor([[ 190.2009,  453.0922,  293.3333,  513.0078],
        [ 153.8074,  660.5188,  287.1689,  732.6583],
        [ 177.8057,  516.3827,  290.9767,  583.4904],
        [ 167.7036,  584.7004,  289.3115,  655.8925],
        [ 195.7966,  390.3867,  296.3724,  449.6751],
        [ 196.7142,  225.5675,  290.4601,  276.2874],
        [ 197.5417,  333.6650,  294.6044,  387.5468],
        [ 204.0122,  116.1745,  297.0902,  167.8171],
        [ 195.6786,  277.5800,  291.6375,  331.5203],
        [ 149.9082,  740.8981,  285.8707,  812.3985],
        [ 199.6141,  171.5184,  292.2135,  223.5091],
        [ 201.7637,   66.8036,  301.4023,  108.2415],
        [ 195.2049,   17.2008,  308.1707,   61.5089],
        [ 155.9697,  822.1837,  289.7679,  910.4730],
        [ 161.7753,  915.4767,  306.4033, 1002.2914],
        [ 175.7242, 1005.1984,  320.0826, 1091.2776],
        [ 222.5984, 1098.1340,  354.5176, 1182.9659],
        [ 188.3813,  531.6042,  250.5957,  562.8647]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9995, 0.9995, 0.9994, 0.9993, 0.9992, 0.9991, 0.9991, 0.9990, 0.9988,
        0.9988, 0.9980, 0.9978, 0.9965, 0.9878, 0.9849, 0.9783, 0.5173, 0.1007],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 254.1147,   14.0566,  355.0355,   67.4535],
        [ 136.0496,  463.3789,  243.8663,  528.0128],
        [ 245.1914,   69.5535,  347.9247,  127.7267],
        [ 135.8230,  402.8257,  245.3392,  470.3335],
        [ 199.8360,  721.8253,  319.1035,  813.0106],
        [ 225.8825,  182.8179,  316.2015,  245.5170],
        [ 220.6554,  810.7075,  335.4675,  897.5931],
        [ 162.7588,  581.3534,  280.9240,  660.5621],
        [ 152.1447,  338.9205,  258.2324,  413.7456],
        [ 216.4615, 1002.4075,  355.4627, 1096.9564],
        [ 230.7437,  122.3466,  334.6924,  187.3597],
        [ 187.4884,  652.0745,  296.1970,  729.4737],
        [ 206.7564, 1101.6077,  355.6379, 1200.0000],
        [ 143.3346,  523.9581,  256.9979,  589.2526],
        [ 221.8801,  907.1461,  351.6030,  993.7119],
        [ 207.6059,  240.4010,  302.2857,  303.5208],
        [ 179.5719,  284.7793,  282.0311,  355.1097],
        [ 142.3366,  336.0015,  252.0085,  507.5174],
        [ 165.6205,  312.7017,  270.2733,  372.5707],
        [ 138.5436,  420.6532,  251.7912,  570.6033]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9992, 0.9990, 0.9990, 0.9987, 0.9983, 0.9977, 0.9976, 0.9976, 0.9972,
        0.9972, 0.9972, 0.9967, 0.9965, 0.9961, 0.9951, 0.9929, 0.9898, 0.1932,
        0.1001, 0.0717], device='cuda:0')}]
20
[{'boxes': tensor([[ 189.3325,    9.6960,  291.7917,   62.5095],
        [ 190.6023,  584.4838,  293.4261,  647.9086],
        [ 188.9795,  348.7747,  278.0238,  407.3793],
        [ 185.9052,  408.0016,  274.0767,  465.7696],
        [ 184.0257,  466.6367,  276.2578,  522.7655],
        [ 195.9330,   63.7929,  290.3258,  106.7946],
        [ 196.5945,  292.1806,  284.3753,  347.4420],
        [ 186.5332,  524.7636,  285.5804,  584.7789],
        [ 189.4537,  644.6675,  308.7330,  718.4976],
        [ 197.7144,  114.6844,  288.0311,  163.4575],
        [ 198.8146,  175.8164,  287.6559,  236.6032],
        [ 199.4404,  238.4230,  287.2159,  293.5721],
        [ 206.6805,  925.0174,  337.2137, 1009.1482],
        [ 204.1080,  849.7643,  339.9413,  928.7074],
        [ 205.4942,  785.8684,  343.9633,  852.4827],
        [ 194.6065, 1012.1039,  329.8389, 1097.5251],
        [ 200.1065,  715.8195,  323.1524,  784.1128],
        [ 156.1711, 1104.9871,  316.1426, 1175.5870],
        [ 192.6307,  360.9295,  251.1708,  388.9750],
        [ 181.9608,  602.9752,  308.3025,  758.7802],
        [ 176.9760,  421.2718,  278.0945,  520.9843],
        [   0.0000, 1099.6167,  352.8647, 1180.5488],
        [ 196.8237,  647.3848,  323.1361,  799.6125],
        [ 197.2222,  347.3345,  229.0070,  405.9576]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9996, 0.9994, 0.9994, 0.9992, 0.9992, 0.9992, 0.9991, 0.9991, 0.9983,
        0.9982, 0.9972, 0.9962, 0.9948, 0.9944, 0.9887, 0.9855, 0.9629, 0.8647,
        0.4369, 0.1499, 0.0964, 0.0819, 0.0755, 0.0629], device='cuda:0')}]
24
[{'boxes': tensor([[ 189.8481,  413.4335,  288.3460,  474.6472],
        [ 182.2794,  686.0501,  294.9011,  758.8223],
        [ 186.3009,  611.1160,  293.9935,  681.2139],
        [ 189.0467,  350.0186,  285.3142,  413.0548],
        [ 187.1280,  543.4567,  292.8857,  608.8422],
        [ 186.6321,  477.1038,  293.1342,  539.4444],
        [ 184.1369,  221.4794,  275.1816,  281.9757],
        [ 180.2198,  766.0884,  294.0329,  840.8201],
        [ 182.7304,    8.2519,  275.8466,   60.6973],
        [ 180.1067,  162.1304,  270.1742,  217.7482],
        [ 189.9153,  285.2978,  278.7295,  345.9067],
        [ 181.1176,  845.3177,  300.0308,  924.0299],
        [ 179.9319,   63.5447,  273.3906,  105.3768],
        [ 185.4012, 1012.6945,  311.3926, 1094.9517],
        [ 189.9515,  925.9263,  306.9024, 1009.4767],
        [ 180.0234,  109.9022,  268.8537,  157.1286],
        [ 174.5419, 1100.3564,  323.7039, 1198.4277],
        [ 186.5450,  119.4797,  248.7407,  152.8359],
        [ 175.3325,   14.7080,  278.3624,   93.3897],
        [ 203.7605,  115.8514,  264.7912,  149.5142]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9995, 0.9995, 0.9994, 0.9994, 0.9994, 0.9993, 0.9993, 0.9992,
        0.9991, 0.9990, 0.9990, 0.9988, 0.9984, 0.9977, 0.9976, 0.9974, 0.1705,
        0.1360, 0.0757], device='cuda:0')}]
20
[{'boxes': tensor([[ 209.9064,  598.9144,  327.1904,  670.9250],
        [ 209.9227,  530.0403,  318.8532,  599.1813],
        [ 205.6302,  343.8160,  296.0026,  401.1675],
        [ 201.5210,  285.8027,  287.7995,  341.6555],
        [ 207.7303,  466.3430,  314.7202,  532.5577],
        [ 204.8396,  403.3898,  307.9701,  467.7131],
        [ 210.8433,  670.8694,  334.8159,  749.2733],
        [ 189.1870,  162.4963,  279.2407,  218.1584],
        [ 194.2843,  221.6779,  284.8812,  281.8204],
        [ 187.8191,  999.7736,  320.0647, 1086.8832],
        [ 212.3103,  750.8548,  335.4697,  831.3309],
        [ 188.7179,  106.7138,  272.8936,  155.7135],
        [ 209.1906,  834.8542,  338.7775,  913.2407],
        [ 186.9295,   58.9614,  271.1401,   99.8719],
        [ 184.0804,   10.8035,  276.2264,   53.3336],
        [ 202.3956,  912.4673,  327.7203,  995.5071],
        [ 158.7395, 1090.4780,  309.9622, 1189.3120],
        [ 217.5163,  549.7252,  276.1577,  587.9329]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9993, 0.9993, 0.9991, 0.9990, 0.9989, 0.9988, 0.9987,
        0.9986, 0.9985, 0.9979, 0.9971, 0.9966, 0.9964, 0.9958, 0.9933, 0.0534],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 193.3142,  478.6059,  292.7252,  540.0447],
        [ 193.4715,  543.1133,  299.4705,  607.3508],
        [ 194.0545,  610.4492,  302.3417,  679.5788],
        [ 195.2108,  421.5918,  287.1771,  476.4004],
        [ 194.2844,  683.5083,  309.3868,  758.5402],
        [ 194.6475,  366.1626,  283.1567,  418.5809],
        [ 194.7925,  311.0754,  281.8407,  361.7786],
        [ 195.4247,  762.9123,  316.2497,  841.8173],
        [ 222.7270,   11.1500,  309.3201,   55.4620],
        [ 193.0055, 1027.0739,  327.4944, 1119.0106],
        [ 185.0075, 1122.4701,  320.7879, 1200.0000],
        [ 196.5434,  939.9073,  324.0779, 1024.6057],
        [ 199.1796,  255.9219,  282.3272,  306.1734],
        [ 208.3352,  204.7180,  283.6842,  253.1062],
        [ 210.6063,  154.8579,  287.7137,  204.8487],
        [ 198.1638,  850.6232,  320.4406,  931.6396],
        [ 216.7931,   62.7049,  303.3112,  102.9503],
        [ 209.2274,  106.8414,  295.7590,  156.6816],
        [ 202.9830,  167.5107,  289.0530,  257.5733],
        [ 212.1524,   69.9093,  303.4301,  132.6100],
        [ 205.6979,  174.1698,  290.3379,  215.6320],
        [ 198.9591,  210.0686,  285.6630,  295.2178]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9993, 0.9990, 0.9990, 0.9985, 0.9984, 0.9984, 0.9982,
        0.9975, 0.9968, 0.9968, 0.9965, 0.9959, 0.9958, 0.9957, 0.9956, 0.9944,
        0.2332, 0.1508, 0.0707, 0.0643], device='cuda:0')}]
22
[{'boxes': tensor([[ 182.2630,  595.4761,  297.5422,  667.4491],
        [ 199.1729,  465.5598,  300.3661,  529.1066],
        [ 191.0631,  528.2519,  300.3879,  594.2978],
        [ 177.0590,  668.3583,  297.9383,  742.4017],
        [ 224.1707,  288.5107,  306.2627,  344.1057],
        [ 215.7388,  346.1347,  301.7713,  402.7564],
        [ 207.5923,  403.2663,  297.7274,  464.6298],
        [ 228.2260,  171.5237,  310.3639,  228.9836],
        [ 219.3968,   12.0213,  305.7563,   57.0925],
        [ 222.7347,   65.5412,  309.5245,  112.7583],
        [ 224.5386,  116.7581,  309.9969,  166.3478],
        [ 229.4857,  234.6600,  313.0723,  287.8612],
        [ 180.1118,  832.2341,  303.7937,  914.5798],
        [ 185.7115,  918.2970,  313.5533, 1009.0015],
        [ 176.5493, 1109.2489,  330.0598, 1198.7551],
        [ 182.4990, 1011.8200,  313.7817, 1096.9769],
        [ 173.9994,  745.9201,  305.0274,  826.8394]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9992, 0.9991, 0.9990, 0.9990, 0.9989, 0.9985, 0.9985, 0.9984, 0.9982,
        0.9981, 0.9979, 0.9978, 0.9975, 0.9971, 0.9963, 0.9954, 0.9952],
       device='cuda:0')}]
17
[{'boxes': tensor([[ 214.0815,  581.3550,  323.2787,  653.8221],
        [ 214.6161,  654.0479,  327.5470,  731.1026],
        [ 212.8937,  451.7706,  312.0296,  514.9913],
        [ 213.3632,  517.0881,  315.5287,  582.2652],
        [ 213.4685,  391.6650,  303.7682,  450.0536],
        [ 217.5538,  733.5391,  332.4052,  813.1484],
        [ 213.1805,  329.9981,  300.6425,  389.8401],
        [ 215.0275,  220.6944,  298.3553,  275.5075],
        [ 213.4466,  275.9127,  299.4468,  331.3561],
        [ 225.6266,  116.8211,  305.0852,  169.3462],
        [ 193.8561, 1003.4383,  328.6274, 1094.7500],
        [ 173.8183, 1103.5516,  316.4364, 1197.2902],
        [ 226.8032,   64.3794,  310.8327,  114.6937],
        [ 218.5368,  817.7148,  332.4457,  901.5743],
        [ 207.1373,  908.5533,  335.0037,  996.6958],
        [ 226.5316,   11.8105,  312.9450,   59.8399],
        [ 218.6593,  170.5358,  299.4498,  218.1677],
        [ 212.6504,  234.6875,  304.4260,  342.4056],
        [ 215.5182,  160.0048,  302.9889,  286.4672],
        [ 185.9996,  985.3167,  321.1688, 1164.5029],
        [ 212.3587,  349.4140,  307.3448,  462.3692]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9993, 0.9992, 0.9991, 0.9989, 0.9984, 0.9984, 0.9980,
        0.9979, 0.9978, 0.9978, 0.9977, 0.9975, 0.9975, 0.9971, 0.9967, 0.5148,
        0.4305, 0.1485, 0.0872], device='cuda:0')}]
21
[{'boxes': tensor([[ 182.8766,  419.7957,  288.3738,  484.1386],
        [ 185.9317,  484.3982,  293.5321,  551.3641],
        [ 184.3384,  551.5282,  298.3785,  625.4399],
        [ 178.8668,  163.3403,  267.6653,  221.7849],
        [ 176.9142,  111.1705,  267.3303,  159.7434],
        [ 181.7442,  230.3612,  267.8025,  296.6506],
        [ 181.0200,  358.1345,  283.8506,  420.2949],
        [ 192.9938,  784.8923,  318.4376,  872.4229],
        [ 172.4655,   62.2111,  268.9217,  109.5573],
        [ 184.7214,  700.5866,  309.3639,  785.7518],
        [ 184.4924,  625.7347,  301.8678,  700.3652],
        [ 188.6066,  871.6298,  323.7639,  966.4407],
        [ 180.3046,  298.0764,  275.3912,  359.6696],
        [ 163.0574,   11.4068,  268.0489,   58.6724],
        [ 171.4285, 1077.2598,  342.8614, 1195.3228],
        [ 181.3411,  969.5543,  337.7022, 1071.3772],
        [ 179.2245,  380.8604,  290.9797,  552.6401]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9995, 0.9995, 0.9994, 0.9994, 0.9988, 0.9987, 0.9987, 0.9986, 0.9982,
        0.9981, 0.9979, 0.9978, 0.9975, 0.9974, 0.9971, 0.9958, 0.0877],
       device='cuda:0')}]
17
[{'boxes': tensor([[ 220.6730,  540.2473,  323.4710,  598.7131],
        [ 222.0062,   69.2404,  335.8120,  118.9138],
        [ 213.9669,  604.6011,  324.4751,  670.6482],
        [ 228.9289,  123.4525,  329.2654,  169.4277],
        [ 202.8311,  750.7021,  320.8504,  824.6163],
        [ 207.9025,  674.8091,  323.8637,  743.3000],
        [ 232.3508,  230.6693,  320.8420,  297.6331],
        [ 228.2772,  299.7990,  320.0527,  358.6602],
        [ 237.6017,  174.6982,  322.5085,  227.6446],
        [ 225.5471,  359.5471,  321.7092,  416.3503],
        [ 224.2587,  417.9608,  322.1050,  473.7902],
        [ 223.3403,  476.4109,  323.2315,  533.5008],
        [ 218.6467,   13.2792,  339.6536,   64.7841],
        [ 157.5195, 1102.7742,  308.0734, 1196.1511],
        [ 194.8735,  829.7072,  318.5516,  910.3678],
        [ 172.9370, 1010.2856,  312.7620, 1098.5907],
        [ 181.8864,  917.1694,  315.9030, 1004.7341],
        [ 240.7884,  243.8724,  309.4102,  278.6934],
        [ 226.8255,  393.4345,  320.1411,  553.5740],
        [ 227.0255,   21.4660,  330.1658,  223.5651]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9994, 0.9994, 0.9994, 0.9993, 0.9993, 0.9993, 0.9992, 0.9992, 0.9992,
        0.9990, 0.9989, 0.9989, 0.9982, 0.9981, 0.9964, 0.9961, 0.9957, 0.5912,
        0.3609, 0.0508], device='cuda:0')}]
20
[{'boxes': tensor([[ 202.8527,  444.8722,  308.6783,  508.3138],
        [ 200.6505,  380.8840,  299.0920,  443.5611],
        [ 203.8833,  511.1317,  314.8587,  575.8894],
        [ 204.1530,  580.3741,  323.3502,  654.9417],
        [ 197.4566,  198.2304,  286.8510,  252.1078],
        [ 199.5628,  260.4573,  290.4129,  315.2894],
        [ 181.6276,   14.9185,  291.5386,   70.3333],
        [ 200.7648,  319.9225,  294.8286,  378.6490],
        [ 184.7060,   81.0175,  290.2181,  135.1476],
        [ 192.4697,  141.9507,  286.9209,  191.3766],
        [ 185.2979,  905.1580,  320.3457,  993.8059],
        [ 195.2645,  815.4820,  319.0692,  902.2646],
        [ 198.1533,  733.3854,  323.3586,  816.0011],
        [ 198.9293,  656.9076,  322.6397,  731.8689],
        [ 181.0585,  999.1777,  319.7042, 1088.0975],
        [ 169.4154, 1097.5844,  330.1719, 1192.2720],
        [ 200.0592,  199.0848,  228.5896,  250.5539]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9993, 0.9993, 0.9993, 0.9992, 0.9992, 0.9992, 0.9992, 0.9991, 0.9990,
        0.9980, 0.9972, 0.9971, 0.9966, 0.9965, 0.9957, 0.9947, 0.0571],
       device='cuda:0')}]
17
[{'boxes': tensor([[ 183.0536,  444.3888,  289.0934,  512.1765],
        [ 188.8292,  509.3586,  295.1210,  573.6752],
        [ 179.1713,  382.2730,  286.8204,  448.2555],
        [ 176.8161,    9.0086,  286.8360,   66.1977],
        [ 173.8626,  256.5950,  264.6332,  318.1626],
        [ 195.0420,  576.3606,  308.1180,  646.9385],
        [ 168.2977,  187.5197,  261.2230,  254.7964],
        [ 172.5890,   64.0194,  280.2310,  126.7433],
        [ 194.5893,  645.0731,  315.2184,  724.1433],
        [ 168.8876,  123.5146,  264.5094,  188.1860],
        [ 197.6505,  983.9577,  328.7934, 1080.3835],
        [ 199.7520,  720.5446,  320.7432,  806.5234],
        [ 177.3846,  317.6628,  272.5624,  384.8282],
        [ 201.1970,  890.7437,  324.6900,  980.1820],
        [ 203.1006,  803.9340,  324.7533,  887.8034],
        [ 182.1888, 1085.0057,  332.3870, 1193.8622],
        [ 198.8929,  628.4940,  316.9148,  799.2587],
        [ 171.4519,  265.1821,  275.3802,  425.6062]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9994, 0.9994, 0.9993, 0.9993, 0.9993, 0.9992, 0.9992, 0.9991, 0.9991,
        0.9990, 0.9989, 0.9988, 0.9986, 0.9980, 0.9977, 0.9976, 0.4448, 0.0609],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 209.6817,  669.1623,  323.9891,  743.8136],
        [ 212.1254,  601.0105,  320.9344,  669.2478],
        [ 210.4601,  352.4175,  307.8123,  417.4583],
        [ 216.4696,  540.9713,  319.6108,  600.0046],
        [ 237.5514,  177.6324,  321.1688,  232.6256],
        [ 216.8438,  480.2514,  318.1641,  541.2891],
        [ 212.3316,  416.4242,  310.7238,  479.1464],
        [ 187.4039, 1009.6108,  314.9243, 1107.1996],
        [ 218.5383,   65.2761,  311.4390,  123.1570],
        [ 232.3053,  231.6885,  320.0913,  290.8943],
        [ 219.8246,  290.8040,  314.1088,  354.2087],
        [ 232.9528,  121.8417,  318.2504,  178.3540],
        [ 176.2461, 1108.9177,  312.4774, 1200.0000],
        [ 208.8103,   11.7764,  298.8590,   64.5941],
        [ 203.9993,  745.3591,  329.4351,  826.4340],
        [ 205.1897,  827.2417,  318.9580,  910.9907],
        [ 191.4191,  917.2710,  321.0837, 1004.4578],
        [ 225.0864,  600.6021,  254.5354,  668.2791]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9994, 0.9993, 0.9993, 0.9991, 0.9991, 0.9989, 0.9989, 0.9988, 0.9987,
        0.9987, 0.9986, 0.9985, 0.9985, 0.9983, 0.9981, 0.9979, 0.9965, 0.1557],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 212.5139,  495.0942,  320.9314,  568.1353],
        [ 216.4247,  362.8521,  310.6394,  426.6116],
        [ 220.4513,  171.7834,  301.1570,  233.1856],
        [ 220.6623,  300.5029,  305.0161,  360.6042],
        [ 209.3628,  568.0967,  320.0669,  641.3568],
        [ 194.7404,  720.7103,  309.9491,  810.3730],
        [ 199.3144,  641.9766,  315.1399,  723.0270],
        [ 215.9028,  429.4700,  317.6872,  492.7608],
        [ 223.2710,  235.7315,  301.2475,  296.6856],
        [ 203.2564,    9.9849,  296.8657,   62.7281],
        [ 178.3122, 1099.0354,  319.3117, 1196.4696],
        [ 217.6080,  117.5181,  298.9228,  164.5817],
        [ 191.8831,  808.7763,  311.6440,  900.6425],
        [ 188.9669,  900.7776,  313.4122,  995.3258],
        [ 210.2129,   65.6989,  297.7769,  111.2277],
        [ 185.8912, 1001.3820,  314.6558, 1089.0797]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9994, 0.9993, 0.9993, 0.9992, 0.9992, 0.9991, 0.9990, 0.9990, 0.9990,
        0.9989, 0.9987, 0.9986, 0.9985, 0.9982, 0.9979, 0.9978],
       device='cuda:0')}]
16
[4mReloaded modules[24m: engine, utils_rcnn, coco_eval, coco_utils, transforms, SpineDataset, ShowBbox
[{'boxes': tensor([[ 193.6129,  655.3577,  316.1725,  721.2000],
        [ 194.6420,  518.9780,  304.7615,  583.2784],
        [ 199.9573,  282.1512,  296.0612,  335.8791],
        [ 197.9327,  456.9795,  296.5705,  510.7925],
        [ 201.6034,  804.0540,  328.0406,  878.5033],
        [ 196.6850,  590.3518,  311.0996,  649.7177],
        [ 198.7841,  342.8437,  296.1818,  394.1659],
        [ 198.0339,  726.8633,  321.9662,  801.8980],
        [ 197.5978,  401.2241,  299.2482,  449.9938],
        [ 210.4744,  121.8730,  300.2847,  160.2078],
        [ 198.7737,  884.2849,  331.9515,  965.2789],
        [ 212.9294,   16.3239,  308.1630,   63.3524],
        [ 212.1630,   69.0265,  303.4065,  109.5728],
        [ 203.6322,  224.2900,  300.2151,  274.5933],
        [ 186.2836, 1069.6515,  332.7600, 1138.5900],
        [ 209.4016,  172.0187,  296.0212,  214.6670],
        [ 183.9622,  976.2139,  339.7634, 1056.4104],
        [ 201.1043, 1130.6582,  346.3438, 1191.5342],
        [ 211.7594,   39.8757,  308.2061,   76.0639],
        [ 174.6944, 1092.0822,  341.7114, 1159.5884]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9994, 0.9992, 0.9992, 0.9991, 0.9990, 0.9990, 0.9988, 0.9988, 0.9979,
        0.9968, 0.9963, 0.9959, 0.9952, 0.9940, 0.9938, 0.9931, 0.9915, 0.3721,
        0.0942, 0.0511], device='cuda:0')}]
20
[{'boxes': tensor([[ 180.7647,  680.4152,  296.4878,  753.3740],
        [ 188.0424,  605.9057,  301.3882,  674.7181],
        [ 189.8613,  538.7378,  296.1218,  598.9449],
        [ 189.8164,  471.6707,  295.0638,  533.7020],
        [ 193.6604,  290.6222,  285.9437,  349.0255],
        [ 175.7043,  759.8312,  295.8094,  833.8489],
        [ 189.6922,  407.4590,  293.9461,  470.1411],
        [ 187.5509,  348.4846,  292.6182,  408.0122],
        [ 191.7519,  164.8325,  280.3192,  217.4202],
        [ 175.6631,   56.7418,  280.9825,  102.4726],
        [ 185.5971,  111.0120,  277.8740,  156.5492],
        [ 191.3523,  225.7291,  282.8220,  289.4705],
        [ 178.6696, 1018.0019,  308.4180, 1105.5146],
        [ 175.0117,  838.1793,  296.0324,  922.3064],
        [ 175.8505,  927.5947,  299.1646, 1011.5488],
        [ 182.6837, 1116.0846,  323.0909, 1193.7626],
        [ 175.0842,   14.7134,  281.4692,   50.6407],
        [ 174.0618,   24.0393,  282.3264,   90.0645],
        [ 190.7549,  121.1985,  247.8442,  150.1917]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9996, 0.9996, 0.9995, 0.9993, 0.9992, 0.9991, 0.9991, 0.9991, 0.9987,
        0.9986, 0.9981, 0.9980, 0.9980, 0.9971, 0.9967, 0.9966, 0.9942, 0.1248,
        0.0532], device='cuda:0')}]
19
[{'boxes': tensor([[ 184.8826,  628.9482,  295.6805,  692.3338],
        [ 189.2302,  441.0219,  290.9476,  498.0303],
        [ 183.6319,  561.5333,  293.5226,  623.9548],
        [ 182.2602,  501.3707,  294.8145,  559.8543],
        [ 201.1933,  325.5179,  294.9868,  382.3541],
        [ 195.0998,  384.9090,  290.6579,  438.2062],
        [ 231.2691,  159.4037,  314.4969,  209.9199],
        [ 233.4690,   56.9081,  322.3523,   99.3036],
        [ 180.9357,  782.0304,  309.4410,  856.8357],
        [ 232.8016,  107.2561,  320.6183,  153.2486],
        [ 213.9042,  266.5612,  296.9439,  321.1693],
        [ 188.5951,  944.3370,  315.7880, 1024.7645],
        [ 186.5049,  862.2012,  308.7429,  935.6937],
        [ 234.2747,   10.7466,  325.1107,   52.4881],
        [ 184.4527,  697.8175,  309.0403,  775.3476],
        [ 181.0169, 1021.5222,  321.4148, 1100.8729],
        [ 165.7560, 1110.4309,  338.0728, 1187.7263],
        [ 226.6756,  215.6369,  306.4448,  260.7866],
        [ 235.6041,   47.6299,  325.0929,   79.2061],
        [ 177.2319,  942.5463,  315.1018, 1102.2035],
        [ 174.1903,  762.5736,  307.5680,  923.5136]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9992, 0.9991, 0.9989, 0.9988, 0.9986, 0.9982, 0.9979,
        0.9978, 0.9969, 0.9968, 0.9966, 0.9959, 0.9952, 0.9952, 0.9927, 0.9883,
        0.0856, 0.0758, 0.0568], device='cuda:0')}]
21
[{'boxes': tensor([[ 226.0356,  453.6687,  332.6522,  514.8658],
        [ 225.6449,  384.6172,  333.4930,  451.4615],
        [ 226.8792,  589.9810,  343.3294,  657.8051],
        [ 228.7462,  315.6815,  329.3594,  383.1430],
        [ 230.5340,  253.9999,  330.7205,  314.5040],
        [ 227.6966,  518.4438,  343.2592,  588.1720],
        [ 213.3993,  658.3920,  339.1237,  732.0282],
        [ 232.3496,   15.1454,  338.2362,   72.1321],
        [ 234.3501,   78.5288,  340.9257,  133.1375],
        [ 237.8857,  196.1202,  331.8477,  247.9703],
        [ 181.8131,  902.9128,  308.9000,  989.2416],
        [ 239.9902,  141.1168,  338.2372,  190.5544],
        [ 165.5408, 1096.4767,  312.2178, 1196.2712],
        [ 193.9194,  814.3926,  316.5079,  902.6545],
        [ 205.8499,  729.7569,  334.6398,  816.8849],
        [ 171.3930,  992.9891,  308.4554, 1086.8512],
        [ 190.9018,  722.8855,  325.1401,  910.3288],
        [ 221.7363,  567.8448,  344.4621,  707.5363]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9996, 0.9994, 0.9994, 0.9992, 0.9992, 0.9992, 0.9989, 0.9988, 0.9988,
        0.9984, 0.9983, 0.9983, 0.9983, 0.9971, 0.9970, 0.9970, 0.1050, 0.0544],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 214.1864,  589.0003,  329.2530,  657.0487],
        [ 209.4970,  658.0379,  328.9524,  736.1667],
        [ 200.5673,  340.6721,  295.3094,  398.7716],
        [ 215.3378,  524.6026,  325.7756,  591.6179],
        [ 198.1086,  282.5316,  289.6252,  338.8027],
        [ 198.3854,  222.8858,  285.2571,  278.4427],
        [ 191.8472,   61.5932,  288.4547,  113.1483],
        [ 190.5707,   12.7258,  278.4925,   56.8436],
        [ 216.8579,  461.4328,  318.9984,  526.4869],
        [ 208.4372,  401.6000,  307.4771,  461.9288],
        [ 190.4895,  816.2865,  317.9428,  901.2112],
        [ 182.4855,  996.5355,  315.4993, 1092.2949],
        [ 181.5247,  904.4385,  316.0548,  993.0854],
        [ 172.6634, 1095.3605,  318.8502, 1195.6398],
        [ 201.8291,  734.4934,  322.7492,  817.3771],
        [ 193.8626,  162.7630,  287.2485,  216.8057],
        [ 194.1971,  119.2098,  288.6507,  157.6217],
        [ 204.7065,  373.2558,  314.5997,  520.7779],
        [ 204.7723,  648.6282,  324.1078,  804.8478]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9994, 0.9993, 0.9992, 0.9991, 0.9990, 0.9989, 0.9989,
        0.9987, 0.9985, 0.9980, 0.9978, 0.9976, 0.9969, 0.9945, 0.9900, 0.0612,
        0.0506], device='cuda:0')}]
19
[{'boxes': tensor([[ 180.0769,  426.9865,  285.7586,  496.7418],
        [ 165.1680,  567.3439,  282.4283,  639.2407],
        [ 169.5021,  493.5582,  281.6386,  567.4507],
        [ 189.9391,  358.9601,  289.2556,  428.2681],
        [ 205.5461,  891.2975,  333.6613,  990.1122],
        [ 238.4209,  120.9259,  336.1440,  178.1114],
        [ 209.4976,  231.4341,  313.0668,  304.4786],
        [ 201.4651,  293.6000,  303.4906,  366.3942],
        [ 189.9570,  803.3537,  320.6935,  891.2554],
        [ 252.9159,   13.9025,  344.9458,   67.3940],
        [ 223.1496,  175.4714,  325.0316,  240.3963],
        [ 193.0919,  988.6029,  331.1161, 1091.2595],
        [ 180.0870,  721.9130,  304.1064,  803.5457],
        [ 170.2449,  640.9956,  294.5797,  718.2598],
        [ 246.5874,   72.3334,  344.5481,  122.7570],
        [ 157.3180, 1078.9028,  306.1910, 1189.1393],
        [ 235.9699,   67.2945,  343.3272,  173.7685],
        [ 246.3872,  130.8756,  303.4121,  157.5011],
        [ 220.4282,  133.4547,  326.4131,  286.7805]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9994, 0.9993, 0.9987, 0.9986, 0.9985, 0.9985, 0.9985,
        0.9985, 0.9984, 0.9980, 0.9976, 0.9969, 0.9964, 0.9945, 0.2686, 0.2125,
        0.1681], device='cuda:0')}]
19
[{'boxes': tensor([[ 146.6655,  567.2797,  263.0626,  643.5162],
        [ 148.6116,  423.2046,  248.9771,  498.5293],
        [ 219.8851,    3.8133,  322.0853,   62.3063],
        [ 217.8731,   64.1210,  316.6010,  121.8328],
        [ 152.3778,  358.8806,  254.1536,  428.6063],
        [ 188.1610,  801.8251,  320.3619,  901.5063],
        [ 167.6699,  292.5150,  267.7558,  371.5728],
        [ 206.1709,  114.6665,  310.1089,  183.4426],
        [ 144.0034,  492.3321,  254.2147,  570.6451],
        [ 184.5542, 1087.2109,  342.1938, 1195.4292],
        [ 207.2785,  891.6624,  346.0732,  996.7742],
        [ 154.0293,  641.0428,  280.1164,  722.1859],
        [ 163.1729,  721.2509,  302.8577,  810.7577],
        [ 188.4334,  173.3209,  302.1631,  246.5753],
        [ 178.4348,  229.2705,  277.8083,  307.6176],
        [ 198.3059,  992.4669,  350.8997, 1097.7174],
        [ 189.6621,  969.8749,  350.3910, 1190.1399],
        [ 206.2348,   30.2120,  310.7558,  241.8401],
        [ 198.2521,  848.1567,  339.7588,  908.0786]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9992, 0.9990, 0.9990, 0.9989, 0.9988, 0.9988, 0.9987, 0.9986, 0.9986,
        0.9977, 0.9974, 0.9973, 0.9970, 0.9967, 0.9967, 0.9963, 0.2758, 0.2426,
        0.0808], device='cuda:0')}]
19
[{'boxes': tensor([[ 197.1833,  453.4121,  294.1871,  515.4160],
        [ 188.8446,  518.8756,  293.8150,  589.8557],
        [ 199.6755,  391.6975,  291.0274,  450.6725],
        [ 185.0690,  589.1578,  298.8274,  659.6404],
        [ 202.0421,  166.4733,  290.8030,  219.0637],
        [ 200.7867,  330.8860,  291.3675,  391.0865],
        [ 187.8130,  663.8243,  315.5424,  739.7562],
        [ 201.1712,  275.7888,  289.9432,  331.4258],
        [ 210.1561,  116.3862,  289.3817,  164.9245],
        [ 210.2839,    9.9241,  301.2668,   65.4809],
        [ 200.2268,  222.3619,  290.6920,  275.0309],
        [ 194.4054, 1009.2764,  325.0591, 1099.0826],
        [ 175.3996, 1101.5717,  327.8252, 1198.1890],
        [ 210.0949,   64.6891,  295.8734,  118.3876],
        [ 192.6450,  825.5329,  322.4517,  913.8277],
        [ 191.2969,  914.8055,  329.4170, 1008.2135],
        [ 192.3486,  741.8259,  318.6395,  822.5732],
        [ 206.2401,  118.1747,  292.6935,  224.1875],
        [ 198.3454,  517.2789,  222.2755,  586.4609],
        [ 207.5108,   90.9792,  294.3228,  135.4575]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9996, 0.9995, 0.9992, 0.9992, 0.9990, 0.9990, 0.9989, 0.9988, 0.9986,
        0.9986, 0.9985, 0.9984, 0.9978, 0.9977, 0.9976, 0.9973, 0.9971, 0.1264,
        0.0832, 0.0819], device='cuda:0')}]
20
[{'boxes': tensor([[ 194.2469,  589.5775,  302.7080,  664.1637],
        [ 206.2950,  385.5862,  304.6695,  454.0106],
        [ 198.5782,  518.7713,  306.5020,  591.9904],
        [ 201.8166,  449.4982,  306.0130,  519.0335],
        [ 208.1668,  326.7638,  304.3358,  390.8072],
        [ 187.6082,  662.7280,  310.9645,  744.7167],
        [ 242.0403,   55.1319,  330.9261,  102.2402],
        [ 188.2927, 1010.2554,  324.4881, 1108.7948],
        [ 190.4484,  745.3577,  315.3427,  827.0450],
        [ 231.5843,  158.0255,  315.3959,  212.4081],
        [ 176.2625, 1104.2605,  330.3936, 1200.0000],
        [ 196.5027,  918.3247,  322.0200, 1004.8047],
        [ 237.9199,  104.5136,  320.3530,  156.1265],
        [ 248.3891,    7.6994,  334.9743,   53.6021],
        [ 223.5647,  213.0484,  313.2618,  274.8429],
        [ 195.7452,  831.3669,  319.8021,  915.2944],
        [ 217.5448,  271.6044,  301.4965,  323.7549],
        [ 180.5486, 1008.1627,  329.0084, 1200.0000],
        [ 223.0838,  204.7719,  307.2227,  336.7131],
        [ 208.5831,  310.5414,  300.6555,  448.7588]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9994, 0.9992, 0.9990, 0.9988, 0.9987, 0.9986, 0.9986,
        0.9981, 0.9979, 0.9978, 0.9977, 0.9975, 0.9975, 0.9973, 0.9945, 0.6732,
        0.3255, 0.1814], device='cuda:0')}]
20
[{'boxes': tensor([[ 270.2086,   60.0812,  366.4126,  116.8501],
        [ 219.0558,  523.9488,  331.1930,  596.7830],
        [ 271.0335,    5.5463,  366.2302,   59.7672],
        [ 230.4852,  461.5988,  340.9716,  530.9665],
        [ 276.2253,  118.7072,  365.3585,  174.9445],
        [ 266.1577,  230.3215,  354.1580,  291.8812],
        [ 247.9235,  346.8798,  349.6714,  409.6622],
        [ 240.2949,  404.6265,  346.5448,  467.8262],
        [ 256.1189,  290.6476,  352.9948,  351.6826],
        [ 271.8563,  172.7448,  362.2755,  234.0525],
        [ 137.5009,  995.4021,  288.5744, 1085.5332],
        [ 183.3586,  665.1557,  304.9493,  749.5597],
        [ 146.7270,  908.3116,  280.0692,  990.8651],
        [ 205.2734,  590.5791,  318.9171,  672.6932],
        [ 133.3688, 1086.7988,  302.3791, 1192.4991],
        [ 152.9069,  819.9333,  284.0075,  904.3149],
        [ 164.9851,  745.8683,  292.4904,  822.4503],
        [ 278.9702,  187.5230,  335.4245,  214.4341],
        [ 235.2534,  373.2982,  339.7002,  541.6577],
        [ 221.9574,  448.2195,  336.7596,  589.6614],
        [ 283.9911,  173.5611,  313.8020,  230.9604],
        [ 253.5400,  403.1664,  283.4041,  466.4988],
        [ 173.9490,  677.3204,  301.3261,  833.0978]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9994, 0.9994, 0.9993, 0.9993, 0.9991, 0.9990, 0.9989, 0.9987, 0.9987,
        0.9985, 0.9980, 0.9978, 0.9973, 0.9969, 0.9969, 0.9967, 0.9953, 0.3577,
        0.1520, 0.1397, 0.1177, 0.0553, 0.0514], device='cuda:0')}]
23
[{'boxes': tensor([[ 179.3599,  597.4855,  303.1618,  671.7555],
        [ 203.5246,  349.3542,  302.5779,  412.3684],
        [ 203.0800,  288.8579,  300.6247,  353.0372],
        [ 187.2282,  528.6669,  305.1570,  598.6090],
        [ 219.1507,   62.5496,  314.5179,  121.7751],
        [ 207.6068,  234.0935,  303.0920,  294.6572],
        [ 219.6338,  118.9441,  314.6746,  181.5762],
        [ 202.4752,  407.8116,  305.7567,  472.1792],
        [ 216.1072,  176.2097,  309.0960,  239.2452],
        [ 195.4096,  466.8036,  305.1410,  532.2902],
        [ 224.7224,    9.9656,  312.4236,   62.6768],
        [ 172.8489,  667.1694,  298.4443,  753.6569],
        [ 160.3202,  748.9368,  292.0656,  831.3161],
        [ 167.6867, 1116.6121,  335.2643, 1200.0000],
        [ 156.5387, 1010.8907,  313.2186, 1114.6915],
        [ 152.1234,  917.2609,  302.6332, 1013.6865],
        [ 152.0947,  831.2587,  292.1475,  917.9899],
        [ 160.9218,  980.4888,  323.1462, 1200.0000],
        [ 220.8762,  187.9103,  281.7129,  218.2926]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9994, 0.9993, 0.9993, 0.9992, 0.9992, 0.9991, 0.9990,
        0.9989, 0.9988, 0.9986, 0.9973, 0.9972, 0.9970, 0.9964, 0.9962, 0.6761,
        0.0890], device='cuda:0')}]
19
[{'boxes': tensor([[ 175.6100,  579.5417,  296.2817,  652.2116],
        [ 173.5653,  510.8586,  288.7225,  576.7361],
        [ 165.5678,  316.5538,  280.8910,  381.8768],
        [ 173.4425,   12.5152,  290.8806,   71.9216],
        [ 170.1784,  383.9561,  278.8305,  445.3135],
        [ 177.7942,   69.3062,  288.0017,  129.5965],
        [ 172.0420,  249.6251,  271.5764,  314.2625],
        [ 172.5046,  445.5061,  283.9183,  509.5093],
        [ 177.1855,  126.2192,  282.4219,  186.3746],
        [ 171.5842,  183.7105,  274.6539,  249.5197],
        [ 191.1461,  722.3709,  317.0366,  815.7764],
        [ 196.4799,  810.1886,  323.5393,  903.6265],
        [ 197.9465,  900.6887,  335.0367,  992.6681],
        [ 180.6773,  651.7183,  306.5305,  726.4432],
        [ 191.1107,  998.4852,  338.6999, 1089.3081],
        [ 172.5405, 1092.5712,  346.1136, 1194.0675],
        [ 166.0648,  475.2357,  288.9170,  613.5972]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9995, 0.9995, 0.9993, 0.9991, 0.9991, 0.9991, 0.9991, 0.9990, 0.9989,
        0.9986, 0.9978, 0.9977, 0.9975, 0.9971, 0.9955, 0.9954, 0.0505],
       device='cuda:0')}]
17
[{'boxes': tensor([[ 203.4780,  574.4849,  318.9284,  648.1650],
        [ 204.6109,  504.9269,  318.1145,  573.6220],
        [ 209.8898,  439.4741,  319.2420,  505.8039],
        [ 222.2555,  316.8740,  316.7123,  375.4448],
        [ 233.0296,   11.5015,  345.3911,   72.6076],
        [ 216.9322,  377.0078,  318.1519,  440.2884],
        [ 238.2233,   71.3231,  341.6722,  134.2177],
        [ 163.8492, 1083.5460,  308.1690, 1193.9030],
        [ 193.8245,  808.9468,  318.0868,  898.1212],
        [ 193.2917,  646.8312,  316.8749,  725.4246],
        [ 193.8190,  725.7969,  316.5995,  810.2698],
        [ 231.6790,  194.8557,  319.8662,  256.9301],
        [ 190.1972,  895.2151,  319.8369,  992.4492],
        [ 238.4458,  131.7009,  329.4041,  191.3096],
        [ 227.2399,  258.7527,  314.8608,  313.5114],
        [ 180.3084,  991.9891,  316.0057, 1087.1664],
        [ 246.4579,  144.5765,  304.5332,  184.4692]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9996, 0.9994, 0.9993, 0.9992, 0.9991, 0.9991, 0.9991, 0.9987, 0.9987,
        0.9985, 0.9985, 0.9984, 0.9984, 0.9983, 0.9982, 0.9978, 0.0699],
       device='cuda:0')}]
17
[{'boxes': tensor([[ 215.0598,  443.8780,  318.1345,  510.7774],
        [ 210.4825,  510.2721,  318.1484,  577.1156],
        [ 217.4465,  379.2719,  320.4950,  444.0912],
        [ 226.4716,  314.5846,  321.7811,  376.6957],
        [ 201.9248,  579.0890,  318.1013,  654.5147],
        [ 230.0821,  246.8056,  320.3351,  309.8312],
        [ 238.6855,  181.7828,  326.0994,  246.9543],
        [ 246.7015,  122.1802,  337.5039,  183.0405],
        [ 243.1062,    9.9606,  348.6837,   72.5029],
        [ 164.3694, 1092.8401,  308.2959, 1196.2234],
        [ 248.6457,   69.3370,  341.4395,  124.1402],
        [ 191.9786,  822.2066,  312.6698,  904.9689],
        [ 190.5235,  656.3091,  316.3136,  734.3043],
        [ 191.3098,  902.9210,  317.9514,  997.7996],
        [ 184.1333,  997.5677,  313.6886, 1089.6339],
        [ 188.8778,  734.6945,  312.1852,  819.8161],
        [ 244.8750,   82.4772,  339.9777,  171.7665],
        [ 250.0735,  130.9745,  311.1671,  161.5457],
        [ 213.4142,  438.1551,  318.4280,  570.0016],
        [ 239.4286,   13.2404,  340.8223,  159.0998]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9995, 0.9994, 0.9994, 0.9994, 0.9993, 0.9990, 0.9990, 0.9988,
        0.9984, 0.9984, 0.9982, 0.9977, 0.9976, 0.9972, 0.9970, 0.1065, 0.0774,
        0.0558, 0.0528], device='cuda:0')}]
20
[{'boxes': tensor([[ 179.3301,  512.5992,  279.4890,  576.7026],
        [ 174.0975,  577.6613,  286.8099,  648.3453],
        [ 184.9870,  215.5461,  268.3134,  275.1418],
        [ 176.0179,  446.7858,  279.5316,  513.6265],
        [ 167.7982,  645.0710,  288.5336,  720.8839],
        [ 185.4527,  158.1559,  266.4522,  215.8003],
        [ 159.3568,  806.3471,  289.1531,  901.5204],
        [ 182.7236,  276.2495,  270.7281,  332.0292],
        [ 158.3512,  719.8482,  284.9706,  809.7085],
        [ 177.4365,  387.3582,  279.4565,  452.5122],
        [ 175.6553,   58.0032,  263.1290,  104.7446],
        [ 170.2254,    7.6478,  261.4072,   55.7720],
        [ 181.1043,  331.3578,  275.8374,  390.6830],
        [ 165.6658,  898.1493,  296.8770,  993.2476],
        [ 177.3735,  993.7876,  311.8362, 1090.6710],
        [ 183.2499, 1095.3197,  334.0792, 1198.0444],
        [ 183.8510,  107.3460,  262.2553,  155.6163],
        [ 178.7138,  289.2865,  279.1732,  402.5310],
        [ 174.2198,  465.4855,  280.5476,  626.0138]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9993, 0.9993, 0.9990, 0.9990, 0.9990, 0.9987, 0.9987, 0.9987, 0.9986,
        0.9985, 0.9983, 0.9983, 0.9980, 0.9979, 0.9976, 0.9969, 0.9956, 0.1231,
        0.1088], device='cuda:0')}]
19
[{'boxes': tensor([[ 228.8411,  610.6432,  346.1152,  680.0759],
        [ 216.2341,  378.1588,  319.0999,  442.1965],
        [ 208.3117,   64.3438,  297.1997,  114.8927],
        [ 223.7557,  439.4013,  321.1511,  498.5722],
        [ 229.7659,  677.3991,  351.9588,  752.7795],
        [ 227.0376,  549.5226,  338.2801,  615.1127],
        [ 224.8241,  492.3278,  328.0635,  552.9415],
        [ 215.7530,  322.8815,  307.9601,  383.5345],
        [ 212.9695,    9.8084,  304.9574,   64.6030],
        [ 227.6364,  834.4874,  356.2578,  924.3259],
        [ 205.2148,  116.7016,  294.0242,  165.5458],
        [ 235.3680,  752.3362,  358.4923,  838.3203],
        [ 214.5306,  270.9286,  300.3581,  328.9895],
        [ 211.2466,  921.4249,  347.5192, 1017.0209],
        [ 171.1125, 1086.4023,  309.2131, 1193.5621],
        [ 212.7271,  216.9703,  297.0628,  271.4545],
        [ 205.7861,  166.9486,  295.1485,  217.2880],
        [ 192.2285, 1005.0891,  331.9294, 1097.5443],
        [ 213.8190,  248.9207,  302.3572,  389.3548],
        [ 228.3625,  518.1226,  343.4911,  675.3466]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9994, 0.9994, 0.9993, 0.9993, 0.9992, 0.9991, 0.9991, 0.9989, 0.9988,
        0.9987, 0.9985, 0.9984, 0.9983, 0.9982, 0.9978, 0.9975, 0.9961, 0.9879,
        0.8097, 0.2523], device='cuda:0')}]
20
[{'boxes': tensor([[ 183.0107,  533.2736,  293.6545,  598.0845],
        [ 187.6956,  596.3215,  303.6252,  662.5884],
        [ 193.0833,  663.0014,  318.0508,  736.9046],
        [ 178.0090,  348.0050,  275.0272,  410.4838],
        [ 170.2895,   66.4418,  269.4038,  125.8701],
        [ 175.8367,  409.2162,  280.3335,  472.1101],
        [ 176.2504,  471.0605,  287.8244,  533.1816],
        [ 177.8624,  289.9223,  273.1399,  348.3132],
        [ 177.6829,  230.5615,  267.2031,  289.0855],
        [ 167.5685,  122.3660,  264.2108,  179.1843],
        [ 174.9022,    9.4264,  272.6740,   68.1575],
        [ 171.7029,  174.7414,  263.9877,  231.3004],
        [ 192.5005,  999.3601,  327.8920, 1100.5221],
        [ 169.1515, 1092.3622,  314.5280, 1198.7692],
        [ 196.9886,  733.7604,  326.0733,  816.0910],
        [ 202.0064,  909.1116,  334.2026, 1000.9462],
        [ 201.3684,  820.8574,  332.5853,  904.6976],
        [ 169.5858,   58.9495,  266.2318,  195.5952],
        [ 192.0992,  658.3181,  315.9689,  814.3894]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9995, 0.9994, 0.9993, 0.9992, 0.9992, 0.9992, 0.9992, 0.9991, 0.9991,
        0.9990, 0.9988, 0.9988, 0.9984, 0.9980, 0.9978, 0.9974, 0.9971, 0.2649,
        0.0577], device='cuda:0')}]
19
[{'boxes': tensor([[ 214.5634,  597.0209,  324.6757,  662.9893],
        [ 216.3352,  661.5181,  337.6234,  732.0612],
        [ 195.4814,  408.5620,  293.9071,  472.6155],
        [ 181.4145,   63.2625,  273.9045,  121.5881],
        [ 190.8877,  232.3344,  275.5131,  290.5309],
        [ 197.5118,  470.5814,  302.8204,  533.6224],
        [ 179.1743,  118.3539,  271.0392,  173.4339],
        [ 185.9694,  172.2426,  272.2244,  230.2461],
        [ 192.1902,  290.8047,  279.6673,  351.3572],
        [ 189.5892,    6.3305,  277.1235,   61.9169],
        [ 194.1219,  346.9783,  289.1066,  413.4359],
        [ 204.0938,  532.1852,  317.3217,  596.2560],
        [ 187.5177,  998.6526,  335.3487, 1108.5425],
        [ 206.4203,  907.8254,  347.3694, 1004.8099],
        [ 213.3859,  821.2916,  346.8182,  906.1649],
        [ 212.6913,  734.6568,  342.8659,  819.5703],
        [ 153.1006, 1083.6198,  309.6916, 1193.8307],
        [ 197.1751,  289.0739,  228.0804,  351.4901]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9996, 0.9994, 0.9993, 0.9992, 0.9992, 0.9991, 0.9991, 0.9991, 0.9990,
        0.9988, 0.9987, 0.9987, 0.9981, 0.9980, 0.9975, 0.9969, 0.9933, 0.0782],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 161.6297,  306.4640,  259.7147,  370.9810],
        [ 159.2513,  243.8801,  256.7428,  309.6696],
        [ 172.0663,  433.4148,  276.3057,  499.4580],
        [ 164.8827,  368.6812,  264.5251,  432.4268],
        [ 159.0236,  183.4962,  254.1661,  246.7966],
        [ 188.5170,  627.4958,  317.3483,  700.7926],
        [ 158.6525,  126.4970,  249.8972,  185.1383],
        [ 181.2528,  496.1324,  291.4425,  564.5611],
        [ 198.3512,  971.1173,  346.9296, 1085.9874],
        [ 184.6601,  563.0897,  305.5459,  628.3611],
        [ 157.7117,   12.4771,  245.7970,   69.5729],
        [ 156.3520,   74.7302,  248.5034,  128.2691],
        [ 208.7856,  783.3237,  344.5915,  879.0750],
        [ 209.0394,  878.7644,  347.8467,  977.7585],
        [ 196.6952,  699.6415,  333.5154,  786.0514],
        [ 163.7541, 1064.6056,  332.0252, 1192.3975],
        [ 171.8537,  397.0902,  286.3233,  545.1523],
        [ 182.7564,  540.3788,  312.1379,  681.1796]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0'), 'scores': tensor([0.9996, 0.9996, 0.9995, 0.9994, 0.9993, 0.9992, 0.9991, 0.9989, 0.9987,
        0.9987, 0.9986, 0.9985, 0.9982, 0.9977, 0.9977, 0.9948, 0.0984, 0.0587],
       device='cuda:0')}]
18
[{'boxes': tensor([[ 163.4092,  305.7516,  265.0143,  376.0008],
        [ 203.2651,  629.0900,  326.0504,  702.5704],
        [ 158.8933,  244.2935,  257.9037,  309.0965],
        [ 159.2734,  185.9265,  252.7973,  247.7186],
        [ 180.7683,  495.5510,  297.3772,  564.9713],
        [ 169.6879,  373.4211,  269.8566,  438.9958],
        [ 194.2731,  564.6929,  316.4591,  632.4728],
        [ 153.1104,  127.4587,  251.3633,  187.1923],
        [ 171.0062,  439.0614,  282.5761,  498.8039],
        [ 154.4693,   11.1020,  242.6469,   69.7975],
        [ 150.5758,   71.2312,  248.4802,  129.4428],
        [ 191.3534,  971.8925,  342.7153, 1086.1360],
        [ 210.4118,  787.3512,  354.2463,  881.6200],
        [ 203.0352,  705.4451,  343.6823,  786.7938],
        [ 204.9976,  879.5670,  351.9359,  979.9102],
        [ 154.5888, 1068.2062,  322.0606, 1198.9354],
        [ 195.5233,  559.1920,  329.0544,  705.0596],
        [ 170.0669,  969.6425,  332.4381, 1183.4338],
        [ 165.8892,  387.1643,  276.2040,  525.7097]], device='cuda:0'), 'labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       device='cuda:0'), 'scores': tensor([0.9994, 0.9993, 0.9993, 0.9992, 0.9992, 0.9992, 0.9989, 0.9986, 0.9985,
        0.9985, 0.9982, 0.9981, 0.9975, 0.9973, 0.9971, 0.9962, 0.1070, 0.0794,
        0.0508], device='cuda:0')}]
19
[4mReloaded modules[24m: engine, utils_rcnn, coco_eval, coco_utils, transforms, SpineDataset, ShowBbox
imgs ['0001.png', '0002.png', '0003.png', '0004.png', '0005.png', '0006.png', '0007.png', '0008.png', '0009.png', '0010.png', '0011.png', '0012.png', '0013.png', '0014.png', '0015.png', '0016.png', '0017.png', '0018.png', '0019.png', '0020.png', '0021.png', '0022.png', '0023.png', '0024.png', '0025.png', '0026.png', '0027.png', '0028.png', '0029.png', '0030.png', '0031.png', '0032.png', '0033.png', '0034.png', '0035.png', '0036.png', '0037.png', '0038.png', '0039.png', '0040.png']
masks ['0001.png', '0002.png', '0003.png', '0004.png', '0005.png', '0006.png', '0007.png', '0008.png', '0009.png', '0010.png', '0011.png', '0012.png', '0013.png', '0014.png', '0015.png', '0016.png', '0017.png', '0018.png', '0019.png', '0020.png', '0021.png', '0022.png', '0023.png', '0024.png', '0025.png', '0026.png', '0027.png', '0028.png', '0029.png', '0030.png', '0031.png', '0032.png', '0033.png', '0034.png', '0035.png', '0036.png', '0037.png', '0038.png', '0039.png', '0040.png']